
test2.elf:     file format elf32-littlenios2
test2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000ccc memsz 0x00000ccc flags r-x
    LOAD off    0x00001cec vaddr 0x00008cec paddr 0x00008ddc align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ecc vaddr 0x00008ecc paddr 0x00008ecc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001ddc  2**0
                  CONTENTS
  2 .text         00000c90  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00008cb0  00008cb0  00001cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008cec  00008ddc  00001cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008ecc  00008ecc  00001ecc  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00008edc  00008edc  00001ddc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00001e00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003b07  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001414  00000000  00000000  00005bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000016f6  00000000  00000000  00006fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003c8  00000000  00000000  000086cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f4d  00000000  00000000  00008a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001381  00000000  00000000  000099e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ad64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  0000ad78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c01a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000c01d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c021  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000c022  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000c026  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000c02a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000c02e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000b  00000000  00000000  0000c034  2**0
                  CONTENTS, READONLY
 26 .jdi          0000432c  00000000  00000000  0000c03f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00039dcb  00000000  00000000  0001036b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008cb0 l    d  .rodata	00000000 .rodata
00008cec l    d  .rwdata	00000000 .rwdata
00008ecc l    d  .bss	00000000 .bss
00008edc l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008264 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008cec l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008bbc g     F .text	0000002c alt_main
000081b4 g     F .text	00000080 _puts_r
00008ddc g       *ABS*	00000000 __flash_rwdata_start
00008168 g     F .text	0000004c printf
00008ca8 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008ecc g     O .bss	00000004 errno
00008ed4 g     O .bss	00000004 alt_argv
00010dcc g       *ABS*	00000000 _gp
00008dd4 g     O .rwdata	00000004 jtag
00008234 g     F .text	00000014 puts
0000812c g     F .text	0000003c _printf_r
00008a20 g     F .text	00000064 .hidden __udivsi3
00008000 g       *ABS*	00000000 __alt_mem_ram
00008dcc g     O .rwdata	00000004 _global_impure_ptr
00008edc g       *ABS*	00000000 __bss_end
00008ca0 g     F .text	00000004 alt_dcache_flush_all
00008ddc g       *ABS*	00000000 __ram_rwdata_end
00008be8 g     F .text	00000060 write
00008cec g       *ABS*	00000000 __ram_rodata_end
00008a84 g     F .text	00000058 .hidden __umodsi3
00008edc g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008c6c g     F .text	00000034 altera_avalon_jtag_uart_write
000082d0 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008c68 g     F .text	00000004 alt_sys_init
00008104 g     F .text	00000028 .hidden __mulsi3
00008cec g       *ABS*	00000000 __ram_rwdata_start
00008cb0 g       *ABS*	00000000 __ram_rodata_start
00008edc g       *ABS*	00000000 __alt_stack_base
00008818 g     F .text	000000b8 __sfvwrite_small_dev
00008ecc g       *ABS*	00000000 __bss_start
00008094 g     F .text	00000070 main
00008ed0 g     O .bss	00000004 alt_envp
00008dd8 g     O .rwdata	00000004 alt_errno
00008928 g     F .text	00000084 .hidden __divsi3
00008cb0 g       *ABS*	00000000 __flash_rodata_start
0000805c g     F .text	00000038 delay
00008c48 g     F .text	00000020 alt_irq_init
000088d0 g     F .text	00000058 _write_r
00008dd0 g     O .rwdata	00000004 _impure_ptr
00008ed8 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008ddc g       *ABS*	00000000 _edata
00008edc g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000089ac g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008248 g     F .text	0000001c strlen
00008ca4 g     F .text	00000004 alt_icache_flush_all
000087fc g     F .text	0000001c __vfprintf_internal
00008adc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6837314 	ori	gp,gp,3532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3b314 	ori	r2,r2,36556

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3b714 	ori	r3,r3,36572

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008adc0 	call	8adc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008bbc0 	call	8bbc <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff728c>

0000805c <delay>:
#include "altera_avalon_pio_regs.h"

#define bp (unsigned int *) BUTTON_BASE
#define led (unsigned int *) LED_BASE
//int a;
void delay(int a){
    805c:	defffe04 	addi	sp,sp,-8
	volatile int i = 0;
	while (i<a*10000){
    8060:	0149c404 	movi	r5,10000
#include "altera_avalon_pio_regs.h"

#define bp (unsigned int *) BUTTON_BASE
#define led (unsigned int *) LED_BASE
//int a;
void delay(int a){
    8064:	dfc00115 	stw	ra,4(sp)
	volatile int i = 0;
    8068:	d8000015 	stw	zero,0(sp)
	while (i<a*10000){
    806c:	00081040 	call	8104 <__mulsi3>
    8070:	d8c00017 	ldw	r3,0(sp)
    8074:	1880040e 	bge	r3,r2,8088 <delay+0x2c>
		i++;
    8078:	d8c00017 	ldw	r3,0(sp)
    807c:	18c00044 	addi	r3,r3,1
    8080:	d8c00015 	stw	r3,0(sp)
    8084:	003ffa06 	br	8070 <_gp+0xffff72a4>
	}
}
    8088:	dfc00117 	ldw	ra,4(sp)
    808c:	dec00204 	addi	sp,sp,8
    8090:	f800283a 	ret

00008094 <main>:
int main()
{
//  *bp = 0x0400;
//	a = bp(0);

	printf(" from Nios II! \n");
    8094:	01000074 	movhi	r4,1
		i++;
	}
}

int main()
{
    8098:	defffd04 	addi	sp,sp,-12
//  *bp = 0x0400;
//	a = bp(0);

	printf(" from Nios II! \n");
    809c:	21232c04 	addi	r4,r4,-29520
		i++;
	}
}

int main()
{
    80a0:	dfc00215 	stw	ra,8(sp)
    80a4:	dc400115 	stw	r17,4(sp)
    80a8:	dc000015 	stw	r16,0(sp)
//  *bp = 0x0400;
//	a = bp(0);

	printf(" from Nios II! \n");
    80ac:	00082340 	call	8234 <puts>
	printf(" test test test \n");
    80b0:	01000074 	movhi	r4,1
    80b4:	21233004 	addi	r4,r4,-29504

	while(1) {
		printf(" while \n");
		if (*bp == 1) {
    80b8:	04400074 	movhi	r17,1
    80bc:	04000074 	movhi	r16,1
{
//  *bp = 0x0400;
//	a = bp(0);

	printf(" from Nios II! \n");
	printf(" test test test \n");
    80c0:	00082340 	call	8234 <puts>

	while(1) {
		printf(" while \n");
		if (*bp == 1) {
    80c4:	8c440c04 	addi	r17,r17,4144
    80c8:	84040804 	addi	r16,r16,4128

	printf(" from Nios II! \n");
	printf(" test test test \n");

	while(1) {
		printf(" while \n");
    80cc:	01000074 	movhi	r4,1
    80d0:	21233504 	addi	r4,r4,-29484
    80d4:	00082340 	call	8234 <puts>
		if (*bp == 1) {
    80d8:	88c00017 	ldw	r3,0(r17)
    80dc:	00800044 	movi	r2,1
    80e0:	1880051e 	bne	r3,r2,80f8 <main+0x64>
			printf("if if if");
    80e4:	01000074 	movhi	r4,1
    80e8:	21233704 	addi	r4,r4,-29476
    80ec:	00081680 	call	8168 <printf>
			*led = 255;
    80f0:	00803fc4 	movi	r2,255
    80f4:	00000106 	br	80fc <main+0x68>
		}
		else *led = 152;
    80f8:	00802604 	movi	r2,152
    80fc:	80800015 	stw	r2,0(r16)
    8100:	003ff206 	br	80cc <_gp+0xffff7300>

00008104 <__mulsi3>:
    8104:	0005883a 	mov	r2,zero
    8108:	20000726 	beq	r4,zero,8128 <__mulsi3+0x24>
    810c:	20c0004c 	andi	r3,r4,1
    8110:	2008d07a 	srli	r4,r4,1
    8114:	18000126 	beq	r3,zero,811c <__mulsi3+0x18>
    8118:	1145883a 	add	r2,r2,r5
    811c:	294b883a 	add	r5,r5,r5
    8120:	203ffa1e 	bne	r4,zero,810c <_gp+0xffff7340>
    8124:	f800283a 	ret
    8128:	f800283a 	ret

0000812c <_printf_r>:
    812c:	defffd04 	addi	sp,sp,-12
    8130:	dfc00015 	stw	ra,0(sp)
    8134:	d9800115 	stw	r6,4(sp)
    8138:	d9c00215 	stw	r7,8(sp)
    813c:	20c00217 	ldw	r3,8(r4)
    8140:	01800074 	movhi	r6,1
    8144:	31a20604 	addi	r6,r6,-30696
    8148:	19800115 	stw	r6,4(r3)
    814c:	280d883a 	mov	r6,r5
    8150:	21400217 	ldw	r5,8(r4)
    8154:	d9c00104 	addi	r7,sp,4
    8158:	00082d00 	call	82d0 <___vfprintf_internal_r>
    815c:	dfc00017 	ldw	ra,0(sp)
    8160:	dec00304 	addi	sp,sp,12
    8164:	f800283a 	ret

00008168 <printf>:
    8168:	defffc04 	addi	sp,sp,-16
    816c:	dfc00015 	stw	ra,0(sp)
    8170:	d9400115 	stw	r5,4(sp)
    8174:	d9800215 	stw	r6,8(sp)
    8178:	d9c00315 	stw	r7,12(sp)
    817c:	00800074 	movhi	r2,1
    8180:	10a37404 	addi	r2,r2,-29232
    8184:	10800017 	ldw	r2,0(r2)
    8188:	01400074 	movhi	r5,1
    818c:	29620604 	addi	r5,r5,-30696
    8190:	10c00217 	ldw	r3,8(r2)
    8194:	d9800104 	addi	r6,sp,4
    8198:	19400115 	stw	r5,4(r3)
    819c:	200b883a 	mov	r5,r4
    81a0:	11000217 	ldw	r4,8(r2)
    81a4:	00087fc0 	call	87fc <__vfprintf_internal>
    81a8:	dfc00017 	ldw	ra,0(sp)
    81ac:	dec00404 	addi	sp,sp,16
    81b0:	f800283a 	ret

000081b4 <_puts_r>:
    81b4:	defffd04 	addi	sp,sp,-12
    81b8:	dc000015 	stw	r16,0(sp)
    81bc:	2021883a 	mov	r16,r4
    81c0:	2809883a 	mov	r4,r5
    81c4:	dfc00215 	stw	ra,8(sp)
    81c8:	dc400115 	stw	r17,4(sp)
    81cc:	2823883a 	mov	r17,r5
    81d0:	00082480 	call	8248 <strlen>
    81d4:	81400217 	ldw	r5,8(r16)
    81d8:	01000074 	movhi	r4,1
    81dc:	21220604 	addi	r4,r4,-30696
    81e0:	29000115 	stw	r4,4(r5)
    81e4:	100f883a 	mov	r7,r2
    81e8:	880d883a 	mov	r6,r17
    81ec:	8009883a 	mov	r4,r16
    81f0:	00088180 	call	8818 <__sfvwrite_small_dev>
    81f4:	00ffffc4 	movi	r3,-1
    81f8:	10c00926 	beq	r2,r3,8220 <_puts_r+0x6c>
    81fc:	81400217 	ldw	r5,8(r16)
    8200:	01800074 	movhi	r6,1
    8204:	01c00044 	movi	r7,1
    8208:	28800117 	ldw	r2,4(r5)
    820c:	31a33a04 	addi	r6,r6,-29464
    8210:	8009883a 	mov	r4,r16
    8214:	103ee83a 	callr	r2
    8218:	10bfffe0 	cmpeqi	r2,r2,-1
    821c:	0085c83a 	sub	r2,zero,r2
    8220:	dfc00217 	ldw	ra,8(sp)
    8224:	dc400117 	ldw	r17,4(sp)
    8228:	dc000017 	ldw	r16,0(sp)
    822c:	dec00304 	addi	sp,sp,12
    8230:	f800283a 	ret

00008234 <puts>:
    8234:	00800074 	movhi	r2,1
    8238:	10a37404 	addi	r2,r2,-29232
    823c:	200b883a 	mov	r5,r4
    8240:	11000017 	ldw	r4,0(r2)
    8244:	00081b41 	jmpi	81b4 <_puts_r>

00008248 <strlen>:
    8248:	2005883a 	mov	r2,r4
    824c:	10c00007 	ldb	r3,0(r2)
    8250:	18000226 	beq	r3,zero,825c <strlen+0x14>
    8254:	10800044 	addi	r2,r2,1
    8258:	003ffc06 	br	824c <_gp+0xffff7480>
    825c:	1105c83a 	sub	r2,r2,r4
    8260:	f800283a 	ret

00008264 <print_repeat>:
    8264:	defffb04 	addi	sp,sp,-20
    8268:	dc800315 	stw	r18,12(sp)
    826c:	dc400215 	stw	r17,8(sp)
    8270:	dc000115 	stw	r16,4(sp)
    8274:	dfc00415 	stw	ra,16(sp)
    8278:	2025883a 	mov	r18,r4
    827c:	2823883a 	mov	r17,r5
    8280:	d9800005 	stb	r6,0(sp)
    8284:	3821883a 	mov	r16,r7
    8288:	04000a0e 	bge	zero,r16,82b4 <print_repeat+0x50>
    828c:	88800117 	ldw	r2,4(r17)
    8290:	01c00044 	movi	r7,1
    8294:	d80d883a 	mov	r6,sp
    8298:	880b883a 	mov	r5,r17
    829c:	9009883a 	mov	r4,r18
    82a0:	103ee83a 	callr	r2
    82a4:	843fffc4 	addi	r16,r16,-1
    82a8:	103ff726 	beq	r2,zero,8288 <_gp+0xffff74bc>
    82ac:	00bfffc4 	movi	r2,-1
    82b0:	00000106 	br	82b8 <print_repeat+0x54>
    82b4:	0005883a 	mov	r2,zero
    82b8:	dfc00417 	ldw	ra,16(sp)
    82bc:	dc800317 	ldw	r18,12(sp)
    82c0:	dc400217 	ldw	r17,8(sp)
    82c4:	dc000117 	ldw	r16,4(sp)
    82c8:	dec00504 	addi	sp,sp,20
    82cc:	f800283a 	ret

000082d0 <___vfprintf_internal_r>:
    82d0:	deffe504 	addi	sp,sp,-108
    82d4:	d8c00804 	addi	r3,sp,32
    82d8:	ddc01815 	stw	r23,96(sp)
    82dc:	dd801715 	stw	r22,92(sp)
    82e0:	dd401615 	stw	r21,88(sp)
    82e4:	dd001515 	stw	r20,84(sp)
    82e8:	dcc01415 	stw	r19,80(sp)
    82ec:	dc801315 	stw	r18,76(sp)
    82f0:	dc401215 	stw	r17,72(sp)
    82f4:	dc001115 	stw	r16,68(sp)
    82f8:	dfc01a15 	stw	ra,104(sp)
    82fc:	df001915 	stw	fp,100(sp)
    8300:	2029883a 	mov	r20,r4
    8304:	2823883a 	mov	r17,r5
    8308:	382d883a 	mov	r22,r7
    830c:	d9800f15 	stw	r6,60(sp)
    8310:	0021883a 	mov	r16,zero
    8314:	d8000e15 	stw	zero,56(sp)
    8318:	d8000a15 	stw	zero,40(sp)
    831c:	002b883a 	mov	r21,zero
    8320:	0027883a 	mov	r19,zero
    8324:	0025883a 	mov	r18,zero
    8328:	d8000c15 	stw	zero,48(sp)
    832c:	d8000b15 	stw	zero,44(sp)
    8330:	002f883a 	mov	r23,zero
    8334:	d8c00915 	stw	r3,36(sp)
    8338:	d8c00f17 	ldw	r3,60(sp)
    833c:	19000003 	ldbu	r4,0(r3)
    8340:	20803fcc 	andi	r2,r4,255
    8344:	1080201c 	xori	r2,r2,128
    8348:	10bfe004 	addi	r2,r2,-128
    834c:	10011e26 	beq	r2,zero,87c8 <___vfprintf_internal_r+0x4f8>
    8350:	00c00044 	movi	r3,1
    8354:	b8c01426 	beq	r23,r3,83a8 <___vfprintf_internal_r+0xd8>
    8358:	1dc00216 	blt	r3,r23,8364 <___vfprintf_internal_r+0x94>
    835c:	b8000626 	beq	r23,zero,8378 <___vfprintf_internal_r+0xa8>
    8360:	00011506 	br	87b8 <___vfprintf_internal_r+0x4e8>
    8364:	01400084 	movi	r5,2
    8368:	b9401d26 	beq	r23,r5,83e0 <___vfprintf_internal_r+0x110>
    836c:	014000c4 	movi	r5,3
    8370:	b9402b26 	beq	r23,r5,8420 <___vfprintf_internal_r+0x150>
    8374:	00011006 	br	87b8 <___vfprintf_internal_r+0x4e8>
    8378:	01400944 	movi	r5,37
    837c:	1140fc26 	beq	r2,r5,8770 <___vfprintf_internal_r+0x4a0>
    8380:	88800117 	ldw	r2,4(r17)
    8384:	d9000005 	stb	r4,0(sp)
    8388:	01c00044 	movi	r7,1
    838c:	d80d883a 	mov	r6,sp
    8390:	880b883a 	mov	r5,r17
    8394:	a009883a 	mov	r4,r20
    8398:	103ee83a 	callr	r2
    839c:	1000d81e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    83a0:	84000044 	addi	r16,r16,1
    83a4:	00010406 	br	87b8 <___vfprintf_internal_r+0x4e8>
    83a8:	01400c04 	movi	r5,48
    83ac:	1140fa26 	beq	r2,r5,8798 <___vfprintf_internal_r+0x4c8>
    83b0:	01400944 	movi	r5,37
    83b4:	11400a1e 	bne	r2,r5,83e0 <___vfprintf_internal_r+0x110>
    83b8:	d8800005 	stb	r2,0(sp)
    83bc:	88800117 	ldw	r2,4(r17)
    83c0:	b80f883a 	mov	r7,r23
    83c4:	d80d883a 	mov	r6,sp
    83c8:	880b883a 	mov	r5,r17
    83cc:	a009883a 	mov	r4,r20
    83d0:	103ee83a 	callr	r2
    83d4:	1000ca1e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    83d8:	84000044 	addi	r16,r16,1
    83dc:	0000f506 	br	87b4 <___vfprintf_internal_r+0x4e4>
    83e0:	25fff404 	addi	r23,r4,-48
    83e4:	bdc03fcc 	andi	r23,r23,255
    83e8:	00c00244 	movi	r3,9
    83ec:	1dc00936 	bltu	r3,r23,8414 <___vfprintf_internal_r+0x144>
    83f0:	00bfffc4 	movi	r2,-1
    83f4:	90800426 	beq	r18,r2,8408 <___vfprintf_internal_r+0x138>
    83f8:	01400284 	movi	r5,10
    83fc:	9009883a 	mov	r4,r18
    8400:	00081040 	call	8104 <__mulsi3>
    8404:	00000106 	br	840c <___vfprintf_internal_r+0x13c>
    8408:	0005883a 	mov	r2,zero
    840c:	b8a5883a 	add	r18,r23,r2
    8410:	0000e206 	br	879c <___vfprintf_internal_r+0x4cc>
    8414:	01400b84 	movi	r5,46
    8418:	1140e426 	beq	r2,r5,87ac <___vfprintf_internal_r+0x4dc>
    841c:	05c00084 	movi	r23,2
    8420:	213ff404 	addi	r4,r4,-48
    8424:	27003fcc 	andi	fp,r4,255
    8428:	00c00244 	movi	r3,9
    842c:	1f000936 	bltu	r3,fp,8454 <___vfprintf_internal_r+0x184>
    8430:	00bfffc4 	movi	r2,-1
    8434:	98800426 	beq	r19,r2,8448 <___vfprintf_internal_r+0x178>
    8438:	01400284 	movi	r5,10
    843c:	9809883a 	mov	r4,r19
    8440:	00081040 	call	8104 <__mulsi3>
    8444:	00000106 	br	844c <___vfprintf_internal_r+0x17c>
    8448:	0005883a 	mov	r2,zero
    844c:	e0a7883a 	add	r19,fp,r2
    8450:	0000d906 	br	87b8 <___vfprintf_internal_r+0x4e8>
    8454:	00c01b04 	movi	r3,108
    8458:	10c0d226 	beq	r2,r3,87a4 <___vfprintf_internal_r+0x4d4>
    845c:	013fffc4 	movi	r4,-1
    8460:	99000226 	beq	r19,r4,846c <___vfprintf_internal_r+0x19c>
    8464:	d8000b15 	stw	zero,44(sp)
    8468:	00000106 	br	8470 <___vfprintf_internal_r+0x1a0>
    846c:	04c00044 	movi	r19,1
    8470:	01001a44 	movi	r4,105
    8474:	11001626 	beq	r2,r4,84d0 <___vfprintf_internal_r+0x200>
    8478:	20800916 	blt	r4,r2,84a0 <___vfprintf_internal_r+0x1d0>
    847c:	010018c4 	movi	r4,99
    8480:	11008826 	beq	r2,r4,86a4 <___vfprintf_internal_r+0x3d4>
    8484:	01001904 	movi	r4,100
    8488:	11001126 	beq	r2,r4,84d0 <___vfprintf_internal_r+0x200>
    848c:	01001604 	movi	r4,88
    8490:	1100c81e 	bne	r2,r4,87b4 <___vfprintf_internal_r+0x4e4>
    8494:	00c00044 	movi	r3,1
    8498:	d8c00e15 	stw	r3,56(sp)
    849c:	00001506 	br	84f4 <___vfprintf_internal_r+0x224>
    84a0:	01001cc4 	movi	r4,115
    84a4:	11009826 	beq	r2,r4,8708 <___vfprintf_internal_r+0x438>
    84a8:	20800416 	blt	r4,r2,84bc <___vfprintf_internal_r+0x1ec>
    84ac:	01001bc4 	movi	r4,111
    84b0:	1100c01e 	bne	r2,r4,87b4 <___vfprintf_internal_r+0x4e4>
    84b4:	05400204 	movi	r21,8
    84b8:	00000f06 	br	84f8 <___vfprintf_internal_r+0x228>
    84bc:	01001d44 	movi	r4,117
    84c0:	11000d26 	beq	r2,r4,84f8 <___vfprintf_internal_r+0x228>
    84c4:	01001e04 	movi	r4,120
    84c8:	11000a26 	beq	r2,r4,84f4 <___vfprintf_internal_r+0x224>
    84cc:	0000b906 	br	87b4 <___vfprintf_internal_r+0x4e4>
    84d0:	d8c00a17 	ldw	r3,40(sp)
    84d4:	b7000104 	addi	fp,r22,4
    84d8:	18000726 	beq	r3,zero,84f8 <___vfprintf_internal_r+0x228>
    84dc:	df000d15 	stw	fp,52(sp)
    84e0:	b5c00017 	ldw	r23,0(r22)
    84e4:	b800080e 	bge	r23,zero,8508 <___vfprintf_internal_r+0x238>
    84e8:	05efc83a 	sub	r23,zero,r23
    84ec:	02400044 	movi	r9,1
    84f0:	00000606 	br	850c <___vfprintf_internal_r+0x23c>
    84f4:	05400404 	movi	r21,16
    84f8:	b0c00104 	addi	r3,r22,4
    84fc:	d8c00d15 	stw	r3,52(sp)
    8500:	b5c00017 	ldw	r23,0(r22)
    8504:	d8000a15 	stw	zero,40(sp)
    8508:	0013883a 	mov	r9,zero
    850c:	d839883a 	mov	fp,sp
    8510:	b8001726 	beq	r23,zero,8570 <___vfprintf_internal_r+0x2a0>
    8514:	a80b883a 	mov	r5,r21
    8518:	b809883a 	mov	r4,r23
    851c:	da401015 	stw	r9,64(sp)
    8520:	0008a200 	call	8a20 <__udivsi3>
    8524:	a80b883a 	mov	r5,r21
    8528:	1009883a 	mov	r4,r2
    852c:	102d883a 	mov	r22,r2
    8530:	00081040 	call	8104 <__mulsi3>
    8534:	b885c83a 	sub	r2,r23,r2
    8538:	00c00244 	movi	r3,9
    853c:	da401017 	ldw	r9,64(sp)
    8540:	18800216 	blt	r3,r2,854c <___vfprintf_internal_r+0x27c>
    8544:	10800c04 	addi	r2,r2,48
    8548:	00000506 	br	8560 <___vfprintf_internal_r+0x290>
    854c:	d8c00e17 	ldw	r3,56(sp)
    8550:	18000226 	beq	r3,zero,855c <___vfprintf_internal_r+0x28c>
    8554:	10800dc4 	addi	r2,r2,55
    8558:	00000106 	br	8560 <___vfprintf_internal_r+0x290>
    855c:	108015c4 	addi	r2,r2,87
    8560:	e0800005 	stb	r2,0(fp)
    8564:	b02f883a 	mov	r23,r22
    8568:	e7000044 	addi	fp,fp,1
    856c:	003fe806 	br	8510 <_gp+0xffff7744>
    8570:	e6efc83a 	sub	r23,fp,sp
    8574:	9dc5c83a 	sub	r2,r19,r23
    8578:	0080090e 	bge	zero,r2,85a0 <___vfprintf_internal_r+0x2d0>
    857c:	e085883a 	add	r2,fp,r2
    8580:	01400c04 	movi	r5,48
    8584:	d8c00917 	ldw	r3,36(sp)
    8588:	e009883a 	mov	r4,fp
    858c:	e0c0032e 	bgeu	fp,r3,859c <___vfprintf_internal_r+0x2cc>
    8590:	e7000044 	addi	fp,fp,1
    8594:	21400005 	stb	r5,0(r4)
    8598:	e0bffa1e 	bne	fp,r2,8584 <_gp+0xffff77b8>
    859c:	e6efc83a 	sub	r23,fp,sp
    85a0:	d8c00b17 	ldw	r3,44(sp)
    85a4:	4dd1883a 	add	r8,r9,r23
    85a8:	922dc83a 	sub	r22,r18,r8
    85ac:	18001626 	beq	r3,zero,8608 <___vfprintf_internal_r+0x338>
    85b0:	48000a26 	beq	r9,zero,85dc <___vfprintf_internal_r+0x30c>
    85b4:	00800b44 	movi	r2,45
    85b8:	d8800805 	stb	r2,32(sp)
    85bc:	88800117 	ldw	r2,4(r17)
    85c0:	01c00044 	movi	r7,1
    85c4:	d9800804 	addi	r6,sp,32
    85c8:	880b883a 	mov	r5,r17
    85cc:	a009883a 	mov	r4,r20
    85d0:	103ee83a 	callr	r2
    85d4:	10004a1e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    85d8:	84000044 	addi	r16,r16,1
    85dc:	0580070e 	bge	zero,r22,85fc <___vfprintf_internal_r+0x32c>
    85e0:	b00f883a 	mov	r7,r22
    85e4:	01800c04 	movi	r6,48
    85e8:	880b883a 	mov	r5,r17
    85ec:	a009883a 	mov	r4,r20
    85f0:	00082640 	call	8264 <print_repeat>
    85f4:	1000421e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    85f8:	85a1883a 	add	r16,r16,r22
    85fc:	e02d883a 	mov	r22,fp
    8600:	bf2fc83a 	sub	r23,r23,fp
    8604:	00002006 	br	8688 <___vfprintf_internal_r+0x3b8>
    8608:	0580090e 	bge	zero,r22,8630 <___vfprintf_internal_r+0x360>
    860c:	b00f883a 	mov	r7,r22
    8610:	01800804 	movi	r6,32
    8614:	880b883a 	mov	r5,r17
    8618:	a009883a 	mov	r4,r20
    861c:	da401015 	stw	r9,64(sp)
    8620:	00082640 	call	8264 <print_repeat>
    8624:	da401017 	ldw	r9,64(sp)
    8628:	1000351e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    862c:	85a1883a 	add	r16,r16,r22
    8630:	483ff226 	beq	r9,zero,85fc <_gp+0xffff7830>
    8634:	00800b44 	movi	r2,45
    8638:	d8800805 	stb	r2,32(sp)
    863c:	88800117 	ldw	r2,4(r17)
    8640:	01c00044 	movi	r7,1
    8644:	d9800804 	addi	r6,sp,32
    8648:	880b883a 	mov	r5,r17
    864c:	a009883a 	mov	r4,r20
    8650:	103ee83a 	callr	r2
    8654:	10002a1e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    8658:	84000044 	addi	r16,r16,1
    865c:	003fe706 	br	85fc <_gp+0xffff7830>
    8660:	b5bfffc4 	addi	r22,r22,-1
    8664:	b0800003 	ldbu	r2,0(r22)
    8668:	01c00044 	movi	r7,1
    866c:	d9800804 	addi	r6,sp,32
    8670:	d8800805 	stb	r2,32(sp)
    8674:	88800117 	ldw	r2,4(r17)
    8678:	880b883a 	mov	r5,r17
    867c:	a009883a 	mov	r4,r20
    8680:	103ee83a 	callr	r2
    8684:	10001e1e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    8688:	8585c83a 	sub	r2,r16,r22
    868c:	b5c9883a 	add	r4,r22,r23
    8690:	e085883a 	add	r2,fp,r2
    8694:	013ff216 	blt	zero,r4,8660 <_gp+0xffff7894>
    8698:	1021883a 	mov	r16,r2
    869c:	dd800d17 	ldw	r22,52(sp)
    86a0:	00004406 	br	87b4 <___vfprintf_internal_r+0x4e4>
    86a4:	00800044 	movi	r2,1
    86a8:	1480080e 	bge	r2,r18,86cc <___vfprintf_internal_r+0x3fc>
    86ac:	95ffffc4 	addi	r23,r18,-1
    86b0:	b80f883a 	mov	r7,r23
    86b4:	01800804 	movi	r6,32
    86b8:	880b883a 	mov	r5,r17
    86bc:	a009883a 	mov	r4,r20
    86c0:	00082640 	call	8264 <print_repeat>
    86c4:	10000e1e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    86c8:	85e1883a 	add	r16,r16,r23
    86cc:	b0800017 	ldw	r2,0(r22)
    86d0:	01c00044 	movi	r7,1
    86d4:	d80d883a 	mov	r6,sp
    86d8:	d8800005 	stb	r2,0(sp)
    86dc:	88800117 	ldw	r2,4(r17)
    86e0:	880b883a 	mov	r5,r17
    86e4:	a009883a 	mov	r4,r20
    86e8:	b5c00104 	addi	r23,r22,4
    86ec:	103ee83a 	callr	r2
    86f0:	1000031e 	bne	r2,zero,8700 <___vfprintf_internal_r+0x430>
    86f4:	84000044 	addi	r16,r16,1
    86f8:	b82d883a 	mov	r22,r23
    86fc:	00002d06 	br	87b4 <___vfprintf_internal_r+0x4e4>
    8700:	00bfffc4 	movi	r2,-1
    8704:	00003106 	br	87cc <___vfprintf_internal_r+0x4fc>
    8708:	b5c00017 	ldw	r23,0(r22)
    870c:	b7000104 	addi	fp,r22,4
    8710:	b809883a 	mov	r4,r23
    8714:	00082480 	call	8248 <strlen>
    8718:	9091c83a 	sub	r8,r18,r2
    871c:	102d883a 	mov	r22,r2
    8720:	0200090e 	bge	zero,r8,8748 <___vfprintf_internal_r+0x478>
    8724:	400f883a 	mov	r7,r8
    8728:	01800804 	movi	r6,32
    872c:	880b883a 	mov	r5,r17
    8730:	a009883a 	mov	r4,r20
    8734:	da001015 	stw	r8,64(sp)
    8738:	00082640 	call	8264 <print_repeat>
    873c:	da001017 	ldw	r8,64(sp)
    8740:	103fef1e 	bne	r2,zero,8700 <_gp+0xffff7934>
    8744:	8221883a 	add	r16,r16,r8
    8748:	88800117 	ldw	r2,4(r17)
    874c:	b00f883a 	mov	r7,r22
    8750:	b80d883a 	mov	r6,r23
    8754:	880b883a 	mov	r5,r17
    8758:	a009883a 	mov	r4,r20
    875c:	103ee83a 	callr	r2
    8760:	103fe71e 	bne	r2,zero,8700 <_gp+0xffff7934>
    8764:	85a1883a 	add	r16,r16,r22
    8768:	e02d883a 	mov	r22,fp
    876c:	00001106 	br	87b4 <___vfprintf_internal_r+0x4e4>
    8770:	00c00044 	movi	r3,1
    8774:	04ffffc4 	movi	r19,-1
    8778:	d8000e15 	stw	zero,56(sp)
    877c:	d8c00a15 	stw	r3,40(sp)
    8780:	05400284 	movi	r21,10
    8784:	9825883a 	mov	r18,r19
    8788:	d8000c15 	stw	zero,48(sp)
    878c:	d8000b15 	stw	zero,44(sp)
    8790:	182f883a 	mov	r23,r3
    8794:	00000806 	br	87b8 <___vfprintf_internal_r+0x4e8>
    8798:	ddc00b15 	stw	r23,44(sp)
    879c:	05c00084 	movi	r23,2
    87a0:	00000506 	br	87b8 <___vfprintf_internal_r+0x4e8>
    87a4:	00c00044 	movi	r3,1
    87a8:	d8c00c15 	stw	r3,48(sp)
    87ac:	05c000c4 	movi	r23,3
    87b0:	00000106 	br	87b8 <___vfprintf_internal_r+0x4e8>
    87b4:	002f883a 	mov	r23,zero
    87b8:	d8c00f17 	ldw	r3,60(sp)
    87bc:	18c00044 	addi	r3,r3,1
    87c0:	d8c00f15 	stw	r3,60(sp)
    87c4:	003edc06 	br	8338 <_gp+0xffff756c>
    87c8:	8005883a 	mov	r2,r16
    87cc:	dfc01a17 	ldw	ra,104(sp)
    87d0:	df001917 	ldw	fp,100(sp)
    87d4:	ddc01817 	ldw	r23,96(sp)
    87d8:	dd801717 	ldw	r22,92(sp)
    87dc:	dd401617 	ldw	r21,88(sp)
    87e0:	dd001517 	ldw	r20,84(sp)
    87e4:	dcc01417 	ldw	r19,80(sp)
    87e8:	dc801317 	ldw	r18,76(sp)
    87ec:	dc401217 	ldw	r17,72(sp)
    87f0:	dc001117 	ldw	r16,68(sp)
    87f4:	dec01b04 	addi	sp,sp,108
    87f8:	f800283a 	ret

000087fc <__vfprintf_internal>:
    87fc:	00800074 	movhi	r2,1
    8800:	10a37404 	addi	r2,r2,-29232
    8804:	300f883a 	mov	r7,r6
    8808:	280d883a 	mov	r6,r5
    880c:	200b883a 	mov	r5,r4
    8810:	11000017 	ldw	r4,0(r2)
    8814:	00082d01 	jmpi	82d0 <___vfprintf_internal_r>

00008818 <__sfvwrite_small_dev>:
    8818:	2880000b 	ldhu	r2,0(r5)
    881c:	1080020c 	andi	r2,r2,8
    8820:	10002126 	beq	r2,zero,88a8 <__sfvwrite_small_dev+0x90>
    8824:	2880008f 	ldh	r2,2(r5)
    8828:	defffa04 	addi	sp,sp,-24
    882c:	dc000015 	stw	r16,0(sp)
    8830:	dfc00515 	stw	ra,20(sp)
    8834:	dd000415 	stw	r20,16(sp)
    8838:	dcc00315 	stw	r19,12(sp)
    883c:	dc800215 	stw	r18,8(sp)
    8840:	dc400115 	stw	r17,4(sp)
    8844:	2821883a 	mov	r16,r5
    8848:	10001216 	blt	r2,zero,8894 <__sfvwrite_small_dev+0x7c>
    884c:	2027883a 	mov	r19,r4
    8850:	3025883a 	mov	r18,r6
    8854:	3823883a 	mov	r17,r7
    8858:	05010004 	movi	r20,1024
    885c:	04400b0e 	bge	zero,r17,888c <__sfvwrite_small_dev+0x74>
    8860:	880f883a 	mov	r7,r17
    8864:	a440010e 	bge	r20,r17,886c <__sfvwrite_small_dev+0x54>
    8868:	01c10004 	movi	r7,1024
    886c:	8140008f 	ldh	r5,2(r16)
    8870:	900d883a 	mov	r6,r18
    8874:	9809883a 	mov	r4,r19
    8878:	00088d00 	call	88d0 <_write_r>
    887c:	0080050e 	bge	zero,r2,8894 <__sfvwrite_small_dev+0x7c>
    8880:	88a3c83a 	sub	r17,r17,r2
    8884:	90a5883a 	add	r18,r18,r2
    8888:	003ff406 	br	885c <_gp+0xffff7a90>
    888c:	0005883a 	mov	r2,zero
    8890:	00000706 	br	88b0 <__sfvwrite_small_dev+0x98>
    8894:	8080000b 	ldhu	r2,0(r16)
    8898:	10801014 	ori	r2,r2,64
    889c:	8080000d 	sth	r2,0(r16)
    88a0:	00bfffc4 	movi	r2,-1
    88a4:	00000206 	br	88b0 <__sfvwrite_small_dev+0x98>
    88a8:	00bfffc4 	movi	r2,-1
    88ac:	f800283a 	ret
    88b0:	dfc00517 	ldw	ra,20(sp)
    88b4:	dd000417 	ldw	r20,16(sp)
    88b8:	dcc00317 	ldw	r19,12(sp)
    88bc:	dc800217 	ldw	r18,8(sp)
    88c0:	dc400117 	ldw	r17,4(sp)
    88c4:	dc000017 	ldw	r16,0(sp)
    88c8:	dec00604 	addi	sp,sp,24
    88cc:	f800283a 	ret

000088d0 <_write_r>:
    88d0:	defffd04 	addi	sp,sp,-12
    88d4:	dc000015 	stw	r16,0(sp)
    88d8:	04000074 	movhi	r16,1
    88dc:	dc400115 	stw	r17,4(sp)
    88e0:	8423b304 	addi	r16,r16,-28980
    88e4:	2023883a 	mov	r17,r4
    88e8:	2809883a 	mov	r4,r5
    88ec:	300b883a 	mov	r5,r6
    88f0:	380d883a 	mov	r6,r7
    88f4:	dfc00215 	stw	ra,8(sp)
    88f8:	80000015 	stw	zero,0(r16)
    88fc:	0008be80 	call	8be8 <write>
    8900:	00ffffc4 	movi	r3,-1
    8904:	10c0031e 	bne	r2,r3,8914 <_write_r+0x44>
    8908:	80c00017 	ldw	r3,0(r16)
    890c:	18000126 	beq	r3,zero,8914 <_write_r+0x44>
    8910:	88c00015 	stw	r3,0(r17)
    8914:	dfc00217 	ldw	ra,8(sp)
    8918:	dc400117 	ldw	r17,4(sp)
    891c:	dc000017 	ldw	r16,0(sp)
    8920:	dec00304 	addi	sp,sp,12
    8924:	f800283a 	ret

00008928 <__divsi3>:
    8928:	20001b16 	blt	r4,zero,8998 <__divsi3+0x70>
    892c:	000f883a 	mov	r7,zero
    8930:	28001616 	blt	r5,zero,898c <__divsi3+0x64>
    8934:	200d883a 	mov	r6,r4
    8938:	29001a2e 	bgeu	r5,r4,89a4 <__divsi3+0x7c>
    893c:	00800804 	movi	r2,32
    8940:	00c00044 	movi	r3,1
    8944:	00000106 	br	894c <__divsi3+0x24>
    8948:	10000d26 	beq	r2,zero,8980 <__divsi3+0x58>
    894c:	294b883a 	add	r5,r5,r5
    8950:	10bfffc4 	addi	r2,r2,-1
    8954:	18c7883a 	add	r3,r3,r3
    8958:	293ffb36 	bltu	r5,r4,8948 <_gp+0xffff7b7c>
    895c:	0005883a 	mov	r2,zero
    8960:	18000726 	beq	r3,zero,8980 <__divsi3+0x58>
    8964:	0005883a 	mov	r2,zero
    8968:	31400236 	bltu	r6,r5,8974 <__divsi3+0x4c>
    896c:	314dc83a 	sub	r6,r6,r5
    8970:	10c4b03a 	or	r2,r2,r3
    8974:	1806d07a 	srli	r3,r3,1
    8978:	280ad07a 	srli	r5,r5,1
    897c:	183ffa1e 	bne	r3,zero,8968 <_gp+0xffff7b9c>
    8980:	38000126 	beq	r7,zero,8988 <__divsi3+0x60>
    8984:	0085c83a 	sub	r2,zero,r2
    8988:	f800283a 	ret
    898c:	014bc83a 	sub	r5,zero,r5
    8990:	39c0005c 	xori	r7,r7,1
    8994:	003fe706 	br	8934 <_gp+0xffff7b68>
    8998:	0109c83a 	sub	r4,zero,r4
    899c:	01c00044 	movi	r7,1
    89a0:	003fe306 	br	8930 <_gp+0xffff7b64>
    89a4:	00c00044 	movi	r3,1
    89a8:	003fee06 	br	8964 <_gp+0xffff7b98>

000089ac <__modsi3>:
    89ac:	20001716 	blt	r4,zero,8a0c <__modsi3+0x60>
    89b0:	000f883a 	mov	r7,zero
    89b4:	2005883a 	mov	r2,r4
    89b8:	28001216 	blt	r5,zero,8a04 <__modsi3+0x58>
    89bc:	2900162e 	bgeu	r5,r4,8a18 <__modsi3+0x6c>
    89c0:	01800804 	movi	r6,32
    89c4:	00c00044 	movi	r3,1
    89c8:	00000106 	br	89d0 <__modsi3+0x24>
    89cc:	30000a26 	beq	r6,zero,89f8 <__modsi3+0x4c>
    89d0:	294b883a 	add	r5,r5,r5
    89d4:	31bfffc4 	addi	r6,r6,-1
    89d8:	18c7883a 	add	r3,r3,r3
    89dc:	293ffb36 	bltu	r5,r4,89cc <_gp+0xffff7c00>
    89e0:	18000526 	beq	r3,zero,89f8 <__modsi3+0x4c>
    89e4:	1806d07a 	srli	r3,r3,1
    89e8:	11400136 	bltu	r2,r5,89f0 <__modsi3+0x44>
    89ec:	1145c83a 	sub	r2,r2,r5
    89f0:	280ad07a 	srli	r5,r5,1
    89f4:	183ffb1e 	bne	r3,zero,89e4 <_gp+0xffff7c18>
    89f8:	38000126 	beq	r7,zero,8a00 <__modsi3+0x54>
    89fc:	0085c83a 	sub	r2,zero,r2
    8a00:	f800283a 	ret
    8a04:	014bc83a 	sub	r5,zero,r5
    8a08:	003fec06 	br	89bc <_gp+0xffff7bf0>
    8a0c:	0109c83a 	sub	r4,zero,r4
    8a10:	01c00044 	movi	r7,1
    8a14:	003fe706 	br	89b4 <_gp+0xffff7be8>
    8a18:	00c00044 	movi	r3,1
    8a1c:	003ff106 	br	89e4 <_gp+0xffff7c18>

00008a20 <__udivsi3>:
    8a20:	200d883a 	mov	r6,r4
    8a24:	2900152e 	bgeu	r5,r4,8a7c <__udivsi3+0x5c>
    8a28:	28001416 	blt	r5,zero,8a7c <__udivsi3+0x5c>
    8a2c:	00800804 	movi	r2,32
    8a30:	00c00044 	movi	r3,1
    8a34:	00000206 	br	8a40 <__udivsi3+0x20>
    8a38:	10000e26 	beq	r2,zero,8a74 <__udivsi3+0x54>
    8a3c:	28000516 	blt	r5,zero,8a54 <__udivsi3+0x34>
    8a40:	294b883a 	add	r5,r5,r5
    8a44:	10bfffc4 	addi	r2,r2,-1
    8a48:	18c7883a 	add	r3,r3,r3
    8a4c:	293ffa36 	bltu	r5,r4,8a38 <_gp+0xffff7c6c>
    8a50:	18000826 	beq	r3,zero,8a74 <__udivsi3+0x54>
    8a54:	0005883a 	mov	r2,zero
    8a58:	31400236 	bltu	r6,r5,8a64 <__udivsi3+0x44>
    8a5c:	314dc83a 	sub	r6,r6,r5
    8a60:	10c4b03a 	or	r2,r2,r3
    8a64:	1806d07a 	srli	r3,r3,1
    8a68:	280ad07a 	srli	r5,r5,1
    8a6c:	183ffa1e 	bne	r3,zero,8a58 <_gp+0xffff7c8c>
    8a70:	f800283a 	ret
    8a74:	0005883a 	mov	r2,zero
    8a78:	f800283a 	ret
    8a7c:	00c00044 	movi	r3,1
    8a80:	003ff406 	br	8a54 <_gp+0xffff7c88>

00008a84 <__umodsi3>:
    8a84:	2005883a 	mov	r2,r4
    8a88:	2900122e 	bgeu	r5,r4,8ad4 <__umodsi3+0x50>
    8a8c:	28001116 	blt	r5,zero,8ad4 <__umodsi3+0x50>
    8a90:	01800804 	movi	r6,32
    8a94:	00c00044 	movi	r3,1
    8a98:	00000206 	br	8aa4 <__umodsi3+0x20>
    8a9c:	30000c26 	beq	r6,zero,8ad0 <__umodsi3+0x4c>
    8aa0:	28000516 	blt	r5,zero,8ab8 <__umodsi3+0x34>
    8aa4:	294b883a 	add	r5,r5,r5
    8aa8:	31bfffc4 	addi	r6,r6,-1
    8aac:	18c7883a 	add	r3,r3,r3
    8ab0:	293ffa36 	bltu	r5,r4,8a9c <_gp+0xffff7cd0>
    8ab4:	18000626 	beq	r3,zero,8ad0 <__umodsi3+0x4c>
    8ab8:	1806d07a 	srli	r3,r3,1
    8abc:	11400136 	bltu	r2,r5,8ac4 <__umodsi3+0x40>
    8ac0:	1145c83a 	sub	r2,r2,r5
    8ac4:	280ad07a 	srli	r5,r5,1
    8ac8:	183ffb1e 	bne	r3,zero,8ab8 <_gp+0xffff7cec>
    8acc:	f800283a 	ret
    8ad0:	f800283a 	ret
    8ad4:	00c00044 	movi	r3,1
    8ad8:	003ff706 	br	8ab8 <_gp+0xffff7cec>

00008adc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8adc:	deffff04 	addi	sp,sp,-4
    8ae0:	01000074 	movhi	r4,1
    8ae4:	01400074 	movhi	r5,1
    8ae8:	dfc00015 	stw	ra,0(sp)
    8aec:	21233b04 	addi	r4,r4,-29460
    8af0:	29637704 	addi	r5,r5,-29220

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8af4:	2140061e 	bne	r4,r5,8b10 <alt_load+0x34>
    8af8:	01000074 	movhi	r4,1
    8afc:	01400074 	movhi	r5,1
    8b00:	21200804 	addi	r4,r4,-32736
    8b04:	29600804 	addi	r5,r5,-32736
    8b08:	2140121e 	bne	r4,r5,8b54 <alt_load+0x78>
    8b0c:	00000b06 	br	8b3c <alt_load+0x60>
    8b10:	00c00074 	movhi	r3,1
    8b14:	18e37704 	addi	r3,r3,-29220
    8b18:	1907c83a 	sub	r3,r3,r4
    8b1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b20:	10fff526 	beq	r2,r3,8af8 <_gp+0xffff7d2c>
    {
      *to++ = *from++;
    8b24:	114f883a 	add	r7,r2,r5
    8b28:	39c00017 	ldw	r7,0(r7)
    8b2c:	110d883a 	add	r6,r2,r4
    8b30:	10800104 	addi	r2,r2,4
    8b34:	31c00015 	stw	r7,0(r6)
    8b38:	003ff906 	br	8b20 <_gp+0xffff7d54>
    8b3c:	01000074 	movhi	r4,1
    8b40:	01400074 	movhi	r5,1
    8b44:	21232c04 	addi	r4,r4,-29520
    8b48:	29632c04 	addi	r5,r5,-29520

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b4c:	2140101e 	bne	r4,r5,8b90 <alt_load+0xb4>
    8b50:	00000b06 	br	8b80 <alt_load+0xa4>
    8b54:	00c00074 	movhi	r3,1
    8b58:	18e00804 	addi	r3,r3,-32736
    8b5c:	1907c83a 	sub	r3,r3,r4
    8b60:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b64:	10fff526 	beq	r2,r3,8b3c <_gp+0xffff7d70>
    {
      *to++ = *from++;
    8b68:	114f883a 	add	r7,r2,r5
    8b6c:	39c00017 	ldw	r7,0(r7)
    8b70:	110d883a 	add	r6,r2,r4
    8b74:	10800104 	addi	r2,r2,4
    8b78:	31c00015 	stw	r7,0(r6)
    8b7c:	003ff906 	br	8b64 <_gp+0xffff7d98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b80:	0008ca00 	call	8ca0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b84:	dfc00017 	ldw	ra,0(sp)
    8b88:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8b8c:	0008ca41 	jmpi	8ca4 <alt_icache_flush_all>
    8b90:	00c00074 	movhi	r3,1
    8b94:	18e33b04 	addi	r3,r3,-29460
    8b98:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ba0:	18bff726 	beq	r3,r2,8b80 <_gp+0xffff7db4>
    {
      *to++ = *from++;
    8ba4:	114f883a 	add	r7,r2,r5
    8ba8:	39c00017 	ldw	r7,0(r7)
    8bac:	110d883a 	add	r6,r2,r4
    8bb0:	10800104 	addi	r2,r2,4
    8bb4:	31c00015 	stw	r7,0(r6)
    8bb8:	003ff906 	br	8ba0 <_gp+0xffff7dd4>

00008bbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8bbc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8bc0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8bc4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8bc8:	0008c480 	call	8c48 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8bcc:	0008c680 	call	8c68 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8bd0:	d1a04117 	ldw	r6,-32508(gp)
    8bd4:	d1604217 	ldw	r5,-32504(gp)
    8bd8:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8bdc:	dfc00017 	ldw	ra,0(sp)
    8be0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8be4:	00080941 	jmpi	8094 <main>

00008be8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8be8:	00800044 	movi	r2,1
    8bec:	20800226 	beq	r4,r2,8bf8 <write+0x10>
    8bf0:	00800084 	movi	r2,2
    8bf4:	2080041e 	bne	r4,r2,8c08 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8bf8:	01000074 	movhi	r4,1
    8bfc:	000f883a 	mov	r7,zero
    8c00:	21237504 	addi	r4,r4,-29228
    8c04:	0008c6c1 	jmpi	8c6c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8c08:	d0a00317 	ldw	r2,-32756(gp)
    8c0c:	10000926 	beq	r2,zero,8c34 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8c10:	deffff04 	addi	sp,sp,-4
    8c14:	dfc00015 	stw	ra,0(sp)
    8c18:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8c1c:	00c01444 	movi	r3,81
    8c20:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c24:	00bfffc4 	movi	r2,-1
    8c28:	dfc00017 	ldw	ra,0(sp)
    8c2c:	dec00104 	addi	sp,sp,4
    8c30:	f800283a 	ret
    8c34:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8c38:	00c01444 	movi	r3,81
    8c3c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c40:	00bfffc4 	movi	r2,-1
    8c44:	f800283a 	ret

00008c48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8c48:	deffff04 	addi	sp,sp,-4
    8c4c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8c50:	0008ca80 	call	8ca8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8c54:	00800044 	movi	r2,1
    8c58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8c5c:	dfc00017 	ldw	ra,0(sp)
    8c60:	dec00104 	addi	sp,sp,4
    8c64:	f800283a 	ret

00008c68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8c68:	f800283a 	ret

00008c6c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8c6c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8c70:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8c74:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c78:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8c7c:	2980072e 	bgeu	r5,r6,8c9c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c80:	38c00037 	ldwio	r3,0(r7)
    8c84:	18ffffec 	andhi	r3,r3,65535
    8c88:	183ffc26 	beq	r3,zero,8c7c <_gp+0xffff7eb0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8c8c:	28c00007 	ldb	r3,0(r5)
    8c90:	20c00035 	stwio	r3,0(r4)
    8c94:	29400044 	addi	r5,r5,1
    8c98:	003ff806 	br	8c7c <_gp+0xffff7eb0>

  return count;
}
    8c9c:	f800283a 	ret

00008ca0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8ca0:	f800283a 	ret

00008ca4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8ca4:	f800283a 	ret

00008ca8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8ca8:	000170fa 	wrctl	ienable,zero
    8cac:	f800283a 	ret
