
pwm1.elf:     file format elf32-littlenios2
pwm1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000cd4 memsz 0x00000cd4 flags r-x
    LOAD off    0x00001cf4 vaddr 0x00008cf4 paddr 0x00008de4 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ed4 vaddr 0x00008ed4 paddr 0x00008ed4 align 2**12
         filesz 0x00000000 memsz 0x00000020 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001de4  2**0
                  CONTENTS
  2 .text         00000c70  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  00008c90  00008c90  00001c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008cf4  00008de4  00001cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000020  00008ed4  00008ed4  00001ed4  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00008ef4  00008ef4  00001de4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  00001e08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003675  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001301  00000000  00000000  00005725  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000156b  00000000  00000000  00006a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000398  00000000  00000000  00007f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f73  00000000  00000000  0000832c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001300  00000000  00000000  0000929f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b856  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000b859  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b85c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b85d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b85e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b869  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b874  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000b87f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0000b885  2**0
                  CONTENTS, READONLY
 26 .jdi          0000458c  00000000  00000000  0000b8bc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003eb4a  00000000  00000000  0000fe48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008c90 l    d  .rodata	00000000 .rodata
00008cf4 l    d  .rwdata	00000000 .rwdata
00008ed4 l    d  .bss	00000000 .bss
00008ef4 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pwm1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000081c8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008cf4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008b64 g     F .text	0000002c alt_main
00008de4 g       *ABS*	00000000 __flash_rwdata_start
0000817c g     F .text	0000004c printf
00008ed4 g     O .bss	00000004 b
00008b90 g     F .text	00000038 alt_putstr
00008c88 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008ee4 g     O .bss	00000004 errno
00008eec g     O .bss	00000004 alt_argv
00010dd4 g       *ABS*	00000000 _gp
00008140 g     F .text	0000003c _printf_r
000089a0 g     F .text	00000064 .hidden __udivsi3
00008dd4 g     O .rwdata	00000004 _global_impure_ptr
00008ef4 g       *ABS*	00000000 __bss_end
00008c80 g     F .text	00000004 alt_dcache_flush_all
00008de4 g       *ABS*	00000000 __ram_rwdata_end
00008bc8 g     F .text	00000060 write
00008cf4 g       *ABS*	00000000 __ram_rodata_end
00008ddc g     O .rwdata	00000004 jtag_uart_0
00008a04 g     F .text	00000058 .hidden __umodsi3
00008ef4 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008c4c g     F .text	00000034 altera_avalon_jtag_uart_write
00008234 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008c48 g     F .text	00000004 alt_sys_init
00008a5c g     F .text	00000028 .hidden __mulsi3
00008cf4 g       *ABS*	00000000 __ram_rwdata_start
00008c90 g       *ABS*	00000000 __ram_rodata_start
00008ed8 g     O .bss	00000004 c
00008ef4 g       *ABS*	00000000 __alt_stack_base
0000877c g     F .text	000000b8 __sfvwrite_small_dev
00008ed4 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000e4 main
00008000 g       *ABS*	00000000 __alt_mem_RAM
00008ee8 g     O .bss	00000004 alt_envp
00008de0 g     O .rwdata	00000004 alt_errno
000088a8 g     F .text	00000084 .hidden __divsi3
00008edc g     O .bss	00000004 d
00008c90 g       *ABS*	00000000 __flash_rodata_start
00008c28 g     F .text	00000020 alt_irq_init
00008850 g     F .text	00000058 _write_r
00008dd8 g     O .rwdata	00000004 _impure_ptr
00008ef0 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008de4 g       *ABS*	00000000 _edata
00008ef4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008ee0 g     O .bss	00000004 a
0000892c g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008834 g     F .text	0000001c strlen
00008c84 g     F .text	00000004 alt_icache_flush_all
00008760 g     F .text	0000001c __vfprintf_internal
00008a84 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6837514 	ori	gp,gp,3540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3b514 	ori	r2,r2,36564

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3bd14 	ori	r3,r3,36596

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7270>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008a840 	call	8a84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008b640 	call	8b64 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7284>

0000805c <main>:




int main()
{ 
    805c:	defffb04 	addi	sp,sp,-20
    8060:	dc800215 	stw	r18,8(sp)
  alt_putstr("Hello Safae!\n");
    8064:	01000074 	movhi	r4,1
  *leds = 0;
    8068:	04800074 	movhi	r18,1




int main()
{ 
    806c:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello Safae!\n");
    8070:	21232404 	addi	r4,r4,-29552
  *leds = 0;
  *freq = 1024;
    8074:	04000074 	movhi	r16,1


int main()
{ 
  alt_putstr("Hello Safae!\n");
  *leds = 0;
    8078:	94840804 	addi	r18,r18,4128




int main()
{ 
    807c:	dfc00415 	stw	ra,16(sp)
  alt_putstr("Hello Safae!\n");
  *leds = 0;
  *freq = 1024;
    8080:	84041004 	addi	r16,r16,4160




int main()
{ 
    8084:	dcc00315 	stw	r19,12(sp)
    8088:	dc400115 	stw	r17,4(sp)
  alt_putstr("Hello Safae!\n");
  *leds = 0;
  *freq = 1024;
  *duty = 512;
    808c:	04c00074 	movhi	r19,1



int main()
{ 
  alt_putstr("Hello Safae!\n");
    8090:	0008b900 	call	8b90 <alt_putstr>
  *leds = 0;
  *freq = 1024;
    8094:	04410004 	movi	r17,1024


int main()
{ 
  alt_putstr("Hello Safae!\n");
  *leds = 0;
    8098:	90000015 	stw	zero,0(r18)
  *freq = 1024;
    809c:	84400015 	stw	r17,0(r16)
  *duty = 512;
    80a0:	9cc41104 	addi	r19,r19,4164
    80a4:	00808004 	movi	r2,512
    80a8:	98800015 	stw	r2,0(r19)
  *control =3 ;
    80ac:	00800074 	movhi	r2,1
    80b0:	10841204 	addi	r2,r2,4168
    80b4:	00c000c4 	movi	r3,3
    80b8:	10c00015 	stw	r3,0(r2)

  b=*freq;
    80bc:	81400017 	ldw	r5,0(r16)
  c=*duty;
  d=*control;

  printf("freq = %d \n",b);
    80c0:	01000074 	movhi	r4,1
    80c4:	21232804 	addi	r4,r4,-29536
  *leds = 0;
  *freq = 1024;
  *duty = 512;
  *control =3 ;

  b=*freq;
    80c8:	d1604015 	stw	r5,-32512(gp)
  c=*duty;
    80cc:	98c00017 	ldw	r3,0(r19)
    80d0:	d0e04115 	stw	r3,-32508(gp)
  d=*control;
    80d4:	10800017 	ldw	r2,0(r2)
    80d8:	d0a04215 	stw	r2,-32504(gp)

  printf("freq = %d \n",b);
    80dc:	000817c0 	call	817c <printf>
  printf("freq2 = %d \n",freq);
    80e0:	01000074 	movhi	r4,1
    80e4:	800b883a 	mov	r5,r16
    80e8:	21232b04 	addi	r4,r4,-29524
    80ec:	000817c0 	call	817c <printf>
  printf("duty = %d \n",c);
    80f0:	d1604117 	ldw	r5,-32508(gp)
    80f4:	01000074 	movhi	r4,1
    80f8:	21232f04 	addi	r4,r4,-29508
    80fc:	000817c0 	call	817c <printf>
  printf("duty2 = %d \n",duty);
    8100:	01000074 	movhi	r4,1
    8104:	980b883a 	mov	r5,r19
    8108:	21233204 	addi	r4,r4,-29496
    810c:	000817c0 	call	817c <printf>
  printf("control = %d \n",d);
    8110:	d1604217 	ldw	r5,-32504(gp)
    8114:	01000074 	movhi	r4,1
    8118:	21233604 	addi	r4,r4,-29480
    811c:	000817c0 	call	817c <printf>



	 printf("freq=%d \n",b);

	 *leds=255;
    8120:	04c03fc4 	movi	r19,255
	 }*/




	 printf("freq=%d \n",b);
    8124:	d1604017 	ldw	r5,-32512(gp)
    8128:	01000074 	movhi	r4,1
    812c:	21233a04 	addi	r4,r4,-29464
    8130:	000817c0 	call	817c <printf>

	 *leds=255;
    8134:	94c00015 	stw	r19,0(r18)
	 *freq=1024;
    8138:	84400015 	stw	r17,0(r16)
    813c:	003ff906 	br	8124 <_gp+0xffff7350>

00008140 <_printf_r>:
    8140:	defffd04 	addi	sp,sp,-12
    8144:	dfc00015 	stw	ra,0(sp)
    8148:	d9800115 	stw	r6,4(sp)
    814c:	d9c00215 	stw	r7,8(sp)
    8150:	20c00217 	ldw	r3,8(r4)
    8154:	01800074 	movhi	r6,1
    8158:	31a1df04 	addi	r6,r6,-30852
    815c:	19800115 	stw	r6,4(r3)
    8160:	280d883a 	mov	r6,r5
    8164:	21400217 	ldw	r5,8(r4)
    8168:	d9c00104 	addi	r7,sp,4
    816c:	00082340 	call	8234 <___vfprintf_internal_r>
    8170:	dfc00017 	ldw	ra,0(sp)
    8174:	dec00304 	addi	sp,sp,12
    8178:	f800283a 	ret

0000817c <printf>:
    817c:	defffc04 	addi	sp,sp,-16
    8180:	dfc00015 	stw	ra,0(sp)
    8184:	d9400115 	stw	r5,4(sp)
    8188:	d9800215 	stw	r6,8(sp)
    818c:	d9c00315 	stw	r7,12(sp)
    8190:	00800074 	movhi	r2,1
    8194:	10a37604 	addi	r2,r2,-29224
    8198:	10800017 	ldw	r2,0(r2)
    819c:	01400074 	movhi	r5,1
    81a0:	2961df04 	addi	r5,r5,-30852
    81a4:	10c00217 	ldw	r3,8(r2)
    81a8:	d9800104 	addi	r6,sp,4
    81ac:	19400115 	stw	r5,4(r3)
    81b0:	200b883a 	mov	r5,r4
    81b4:	11000217 	ldw	r4,8(r2)
    81b8:	00087600 	call	8760 <__vfprintf_internal>
    81bc:	dfc00017 	ldw	ra,0(sp)
    81c0:	dec00404 	addi	sp,sp,16
    81c4:	f800283a 	ret

000081c8 <print_repeat>:
    81c8:	defffb04 	addi	sp,sp,-20
    81cc:	dc800315 	stw	r18,12(sp)
    81d0:	dc400215 	stw	r17,8(sp)
    81d4:	dc000115 	stw	r16,4(sp)
    81d8:	dfc00415 	stw	ra,16(sp)
    81dc:	2025883a 	mov	r18,r4
    81e0:	2823883a 	mov	r17,r5
    81e4:	d9800005 	stb	r6,0(sp)
    81e8:	3821883a 	mov	r16,r7
    81ec:	04000a0e 	bge	zero,r16,8218 <print_repeat+0x50>
    81f0:	88800117 	ldw	r2,4(r17)
    81f4:	01c00044 	movi	r7,1
    81f8:	d80d883a 	mov	r6,sp
    81fc:	880b883a 	mov	r5,r17
    8200:	9009883a 	mov	r4,r18
    8204:	103ee83a 	callr	r2
    8208:	843fffc4 	addi	r16,r16,-1
    820c:	103ff726 	beq	r2,zero,81ec <_gp+0xffff7418>
    8210:	00bfffc4 	movi	r2,-1
    8214:	00000106 	br	821c <print_repeat+0x54>
    8218:	0005883a 	mov	r2,zero
    821c:	dfc00417 	ldw	ra,16(sp)
    8220:	dc800317 	ldw	r18,12(sp)
    8224:	dc400217 	ldw	r17,8(sp)
    8228:	dc000117 	ldw	r16,4(sp)
    822c:	dec00504 	addi	sp,sp,20
    8230:	f800283a 	ret

00008234 <___vfprintf_internal_r>:
    8234:	deffe504 	addi	sp,sp,-108
    8238:	d8c00804 	addi	r3,sp,32
    823c:	ddc01815 	stw	r23,96(sp)
    8240:	dd801715 	stw	r22,92(sp)
    8244:	dd401615 	stw	r21,88(sp)
    8248:	dd001515 	stw	r20,84(sp)
    824c:	dcc01415 	stw	r19,80(sp)
    8250:	dc801315 	stw	r18,76(sp)
    8254:	dc401215 	stw	r17,72(sp)
    8258:	dc001115 	stw	r16,68(sp)
    825c:	dfc01a15 	stw	ra,104(sp)
    8260:	df001915 	stw	fp,100(sp)
    8264:	2029883a 	mov	r20,r4
    8268:	2823883a 	mov	r17,r5
    826c:	382d883a 	mov	r22,r7
    8270:	d9800f15 	stw	r6,60(sp)
    8274:	0021883a 	mov	r16,zero
    8278:	d8000e15 	stw	zero,56(sp)
    827c:	d8000a15 	stw	zero,40(sp)
    8280:	002b883a 	mov	r21,zero
    8284:	0027883a 	mov	r19,zero
    8288:	0025883a 	mov	r18,zero
    828c:	d8000c15 	stw	zero,48(sp)
    8290:	d8000b15 	stw	zero,44(sp)
    8294:	002f883a 	mov	r23,zero
    8298:	d8c00915 	stw	r3,36(sp)
    829c:	d8c00f17 	ldw	r3,60(sp)
    82a0:	19000003 	ldbu	r4,0(r3)
    82a4:	20803fcc 	andi	r2,r4,255
    82a8:	1080201c 	xori	r2,r2,128
    82ac:	10bfe004 	addi	r2,r2,-128
    82b0:	10011e26 	beq	r2,zero,872c <___vfprintf_internal_r+0x4f8>
    82b4:	00c00044 	movi	r3,1
    82b8:	b8c01426 	beq	r23,r3,830c <___vfprintf_internal_r+0xd8>
    82bc:	1dc00216 	blt	r3,r23,82c8 <___vfprintf_internal_r+0x94>
    82c0:	b8000626 	beq	r23,zero,82dc <___vfprintf_internal_r+0xa8>
    82c4:	00011506 	br	871c <___vfprintf_internal_r+0x4e8>
    82c8:	01400084 	movi	r5,2
    82cc:	b9401d26 	beq	r23,r5,8344 <___vfprintf_internal_r+0x110>
    82d0:	014000c4 	movi	r5,3
    82d4:	b9402b26 	beq	r23,r5,8384 <___vfprintf_internal_r+0x150>
    82d8:	00011006 	br	871c <___vfprintf_internal_r+0x4e8>
    82dc:	01400944 	movi	r5,37
    82e0:	1140fc26 	beq	r2,r5,86d4 <___vfprintf_internal_r+0x4a0>
    82e4:	88800117 	ldw	r2,4(r17)
    82e8:	d9000005 	stb	r4,0(sp)
    82ec:	01c00044 	movi	r7,1
    82f0:	d80d883a 	mov	r6,sp
    82f4:	880b883a 	mov	r5,r17
    82f8:	a009883a 	mov	r4,r20
    82fc:	103ee83a 	callr	r2
    8300:	1000d81e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    8304:	84000044 	addi	r16,r16,1
    8308:	00010406 	br	871c <___vfprintf_internal_r+0x4e8>
    830c:	01400c04 	movi	r5,48
    8310:	1140fa26 	beq	r2,r5,86fc <___vfprintf_internal_r+0x4c8>
    8314:	01400944 	movi	r5,37
    8318:	11400a1e 	bne	r2,r5,8344 <___vfprintf_internal_r+0x110>
    831c:	d8800005 	stb	r2,0(sp)
    8320:	88800117 	ldw	r2,4(r17)
    8324:	b80f883a 	mov	r7,r23
    8328:	d80d883a 	mov	r6,sp
    832c:	880b883a 	mov	r5,r17
    8330:	a009883a 	mov	r4,r20
    8334:	103ee83a 	callr	r2
    8338:	1000ca1e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    833c:	84000044 	addi	r16,r16,1
    8340:	0000f506 	br	8718 <___vfprintf_internal_r+0x4e4>
    8344:	25fff404 	addi	r23,r4,-48
    8348:	bdc03fcc 	andi	r23,r23,255
    834c:	00c00244 	movi	r3,9
    8350:	1dc00936 	bltu	r3,r23,8378 <___vfprintf_internal_r+0x144>
    8354:	00bfffc4 	movi	r2,-1
    8358:	90800426 	beq	r18,r2,836c <___vfprintf_internal_r+0x138>
    835c:	01400284 	movi	r5,10
    8360:	9009883a 	mov	r4,r18
    8364:	0008a5c0 	call	8a5c <__mulsi3>
    8368:	00000106 	br	8370 <___vfprintf_internal_r+0x13c>
    836c:	0005883a 	mov	r2,zero
    8370:	b8a5883a 	add	r18,r23,r2
    8374:	0000e206 	br	8700 <___vfprintf_internal_r+0x4cc>
    8378:	01400b84 	movi	r5,46
    837c:	1140e426 	beq	r2,r5,8710 <___vfprintf_internal_r+0x4dc>
    8380:	05c00084 	movi	r23,2
    8384:	213ff404 	addi	r4,r4,-48
    8388:	27003fcc 	andi	fp,r4,255
    838c:	00c00244 	movi	r3,9
    8390:	1f000936 	bltu	r3,fp,83b8 <___vfprintf_internal_r+0x184>
    8394:	00bfffc4 	movi	r2,-1
    8398:	98800426 	beq	r19,r2,83ac <___vfprintf_internal_r+0x178>
    839c:	01400284 	movi	r5,10
    83a0:	9809883a 	mov	r4,r19
    83a4:	0008a5c0 	call	8a5c <__mulsi3>
    83a8:	00000106 	br	83b0 <___vfprintf_internal_r+0x17c>
    83ac:	0005883a 	mov	r2,zero
    83b0:	e0a7883a 	add	r19,fp,r2
    83b4:	0000d906 	br	871c <___vfprintf_internal_r+0x4e8>
    83b8:	00c01b04 	movi	r3,108
    83bc:	10c0d226 	beq	r2,r3,8708 <___vfprintf_internal_r+0x4d4>
    83c0:	013fffc4 	movi	r4,-1
    83c4:	99000226 	beq	r19,r4,83d0 <___vfprintf_internal_r+0x19c>
    83c8:	d8000b15 	stw	zero,44(sp)
    83cc:	00000106 	br	83d4 <___vfprintf_internal_r+0x1a0>
    83d0:	04c00044 	movi	r19,1
    83d4:	01001a44 	movi	r4,105
    83d8:	11001626 	beq	r2,r4,8434 <___vfprintf_internal_r+0x200>
    83dc:	20800916 	blt	r4,r2,8404 <___vfprintf_internal_r+0x1d0>
    83e0:	010018c4 	movi	r4,99
    83e4:	11008826 	beq	r2,r4,8608 <___vfprintf_internal_r+0x3d4>
    83e8:	01001904 	movi	r4,100
    83ec:	11001126 	beq	r2,r4,8434 <___vfprintf_internal_r+0x200>
    83f0:	01001604 	movi	r4,88
    83f4:	1100c81e 	bne	r2,r4,8718 <___vfprintf_internal_r+0x4e4>
    83f8:	00c00044 	movi	r3,1
    83fc:	d8c00e15 	stw	r3,56(sp)
    8400:	00001506 	br	8458 <___vfprintf_internal_r+0x224>
    8404:	01001cc4 	movi	r4,115
    8408:	11009826 	beq	r2,r4,866c <___vfprintf_internal_r+0x438>
    840c:	20800416 	blt	r4,r2,8420 <___vfprintf_internal_r+0x1ec>
    8410:	01001bc4 	movi	r4,111
    8414:	1100c01e 	bne	r2,r4,8718 <___vfprintf_internal_r+0x4e4>
    8418:	05400204 	movi	r21,8
    841c:	00000f06 	br	845c <___vfprintf_internal_r+0x228>
    8420:	01001d44 	movi	r4,117
    8424:	11000d26 	beq	r2,r4,845c <___vfprintf_internal_r+0x228>
    8428:	01001e04 	movi	r4,120
    842c:	11000a26 	beq	r2,r4,8458 <___vfprintf_internal_r+0x224>
    8430:	0000b906 	br	8718 <___vfprintf_internal_r+0x4e4>
    8434:	d8c00a17 	ldw	r3,40(sp)
    8438:	b7000104 	addi	fp,r22,4
    843c:	18000726 	beq	r3,zero,845c <___vfprintf_internal_r+0x228>
    8440:	df000d15 	stw	fp,52(sp)
    8444:	b5c00017 	ldw	r23,0(r22)
    8448:	b800080e 	bge	r23,zero,846c <___vfprintf_internal_r+0x238>
    844c:	05efc83a 	sub	r23,zero,r23
    8450:	02400044 	movi	r9,1
    8454:	00000606 	br	8470 <___vfprintf_internal_r+0x23c>
    8458:	05400404 	movi	r21,16
    845c:	b0c00104 	addi	r3,r22,4
    8460:	d8c00d15 	stw	r3,52(sp)
    8464:	b5c00017 	ldw	r23,0(r22)
    8468:	d8000a15 	stw	zero,40(sp)
    846c:	0013883a 	mov	r9,zero
    8470:	d839883a 	mov	fp,sp
    8474:	b8001726 	beq	r23,zero,84d4 <___vfprintf_internal_r+0x2a0>
    8478:	a80b883a 	mov	r5,r21
    847c:	b809883a 	mov	r4,r23
    8480:	da401015 	stw	r9,64(sp)
    8484:	00089a00 	call	89a0 <__udivsi3>
    8488:	a80b883a 	mov	r5,r21
    848c:	1009883a 	mov	r4,r2
    8490:	102d883a 	mov	r22,r2
    8494:	0008a5c0 	call	8a5c <__mulsi3>
    8498:	b885c83a 	sub	r2,r23,r2
    849c:	00c00244 	movi	r3,9
    84a0:	da401017 	ldw	r9,64(sp)
    84a4:	18800216 	blt	r3,r2,84b0 <___vfprintf_internal_r+0x27c>
    84a8:	10800c04 	addi	r2,r2,48
    84ac:	00000506 	br	84c4 <___vfprintf_internal_r+0x290>
    84b0:	d8c00e17 	ldw	r3,56(sp)
    84b4:	18000226 	beq	r3,zero,84c0 <___vfprintf_internal_r+0x28c>
    84b8:	10800dc4 	addi	r2,r2,55
    84bc:	00000106 	br	84c4 <___vfprintf_internal_r+0x290>
    84c0:	108015c4 	addi	r2,r2,87
    84c4:	e0800005 	stb	r2,0(fp)
    84c8:	b02f883a 	mov	r23,r22
    84cc:	e7000044 	addi	fp,fp,1
    84d0:	003fe806 	br	8474 <_gp+0xffff76a0>
    84d4:	e6efc83a 	sub	r23,fp,sp
    84d8:	9dc5c83a 	sub	r2,r19,r23
    84dc:	0080090e 	bge	zero,r2,8504 <___vfprintf_internal_r+0x2d0>
    84e0:	e085883a 	add	r2,fp,r2
    84e4:	01400c04 	movi	r5,48
    84e8:	d8c00917 	ldw	r3,36(sp)
    84ec:	e009883a 	mov	r4,fp
    84f0:	e0c0032e 	bgeu	fp,r3,8500 <___vfprintf_internal_r+0x2cc>
    84f4:	e7000044 	addi	fp,fp,1
    84f8:	21400005 	stb	r5,0(r4)
    84fc:	e0bffa1e 	bne	fp,r2,84e8 <_gp+0xffff7714>
    8500:	e6efc83a 	sub	r23,fp,sp
    8504:	d8c00b17 	ldw	r3,44(sp)
    8508:	4dd1883a 	add	r8,r9,r23
    850c:	922dc83a 	sub	r22,r18,r8
    8510:	18001626 	beq	r3,zero,856c <___vfprintf_internal_r+0x338>
    8514:	48000a26 	beq	r9,zero,8540 <___vfprintf_internal_r+0x30c>
    8518:	00800b44 	movi	r2,45
    851c:	d8800805 	stb	r2,32(sp)
    8520:	88800117 	ldw	r2,4(r17)
    8524:	01c00044 	movi	r7,1
    8528:	d9800804 	addi	r6,sp,32
    852c:	880b883a 	mov	r5,r17
    8530:	a009883a 	mov	r4,r20
    8534:	103ee83a 	callr	r2
    8538:	10004a1e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    853c:	84000044 	addi	r16,r16,1
    8540:	0580070e 	bge	zero,r22,8560 <___vfprintf_internal_r+0x32c>
    8544:	b00f883a 	mov	r7,r22
    8548:	01800c04 	movi	r6,48
    854c:	880b883a 	mov	r5,r17
    8550:	a009883a 	mov	r4,r20
    8554:	00081c80 	call	81c8 <print_repeat>
    8558:	1000421e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    855c:	85a1883a 	add	r16,r16,r22
    8560:	e02d883a 	mov	r22,fp
    8564:	bf2fc83a 	sub	r23,r23,fp
    8568:	00002006 	br	85ec <___vfprintf_internal_r+0x3b8>
    856c:	0580090e 	bge	zero,r22,8594 <___vfprintf_internal_r+0x360>
    8570:	b00f883a 	mov	r7,r22
    8574:	01800804 	movi	r6,32
    8578:	880b883a 	mov	r5,r17
    857c:	a009883a 	mov	r4,r20
    8580:	da401015 	stw	r9,64(sp)
    8584:	00081c80 	call	81c8 <print_repeat>
    8588:	da401017 	ldw	r9,64(sp)
    858c:	1000351e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    8590:	85a1883a 	add	r16,r16,r22
    8594:	483ff226 	beq	r9,zero,8560 <_gp+0xffff778c>
    8598:	00800b44 	movi	r2,45
    859c:	d8800805 	stb	r2,32(sp)
    85a0:	88800117 	ldw	r2,4(r17)
    85a4:	01c00044 	movi	r7,1
    85a8:	d9800804 	addi	r6,sp,32
    85ac:	880b883a 	mov	r5,r17
    85b0:	a009883a 	mov	r4,r20
    85b4:	103ee83a 	callr	r2
    85b8:	10002a1e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    85bc:	84000044 	addi	r16,r16,1
    85c0:	003fe706 	br	8560 <_gp+0xffff778c>
    85c4:	b5bfffc4 	addi	r22,r22,-1
    85c8:	b0800003 	ldbu	r2,0(r22)
    85cc:	01c00044 	movi	r7,1
    85d0:	d9800804 	addi	r6,sp,32
    85d4:	d8800805 	stb	r2,32(sp)
    85d8:	88800117 	ldw	r2,4(r17)
    85dc:	880b883a 	mov	r5,r17
    85e0:	a009883a 	mov	r4,r20
    85e4:	103ee83a 	callr	r2
    85e8:	10001e1e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    85ec:	8585c83a 	sub	r2,r16,r22
    85f0:	b5c9883a 	add	r4,r22,r23
    85f4:	e085883a 	add	r2,fp,r2
    85f8:	013ff216 	blt	zero,r4,85c4 <_gp+0xffff77f0>
    85fc:	1021883a 	mov	r16,r2
    8600:	dd800d17 	ldw	r22,52(sp)
    8604:	00004406 	br	8718 <___vfprintf_internal_r+0x4e4>
    8608:	00800044 	movi	r2,1
    860c:	1480080e 	bge	r2,r18,8630 <___vfprintf_internal_r+0x3fc>
    8610:	95ffffc4 	addi	r23,r18,-1
    8614:	b80f883a 	mov	r7,r23
    8618:	01800804 	movi	r6,32
    861c:	880b883a 	mov	r5,r17
    8620:	a009883a 	mov	r4,r20
    8624:	00081c80 	call	81c8 <print_repeat>
    8628:	10000e1e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    862c:	85e1883a 	add	r16,r16,r23
    8630:	b0800017 	ldw	r2,0(r22)
    8634:	01c00044 	movi	r7,1
    8638:	d80d883a 	mov	r6,sp
    863c:	d8800005 	stb	r2,0(sp)
    8640:	88800117 	ldw	r2,4(r17)
    8644:	880b883a 	mov	r5,r17
    8648:	a009883a 	mov	r4,r20
    864c:	b5c00104 	addi	r23,r22,4
    8650:	103ee83a 	callr	r2
    8654:	1000031e 	bne	r2,zero,8664 <___vfprintf_internal_r+0x430>
    8658:	84000044 	addi	r16,r16,1
    865c:	b82d883a 	mov	r22,r23
    8660:	00002d06 	br	8718 <___vfprintf_internal_r+0x4e4>
    8664:	00bfffc4 	movi	r2,-1
    8668:	00003106 	br	8730 <___vfprintf_internal_r+0x4fc>
    866c:	b5c00017 	ldw	r23,0(r22)
    8670:	b7000104 	addi	fp,r22,4
    8674:	b809883a 	mov	r4,r23
    8678:	00088340 	call	8834 <strlen>
    867c:	9091c83a 	sub	r8,r18,r2
    8680:	102d883a 	mov	r22,r2
    8684:	0200090e 	bge	zero,r8,86ac <___vfprintf_internal_r+0x478>
    8688:	400f883a 	mov	r7,r8
    868c:	01800804 	movi	r6,32
    8690:	880b883a 	mov	r5,r17
    8694:	a009883a 	mov	r4,r20
    8698:	da001015 	stw	r8,64(sp)
    869c:	00081c80 	call	81c8 <print_repeat>
    86a0:	da001017 	ldw	r8,64(sp)
    86a4:	103fef1e 	bne	r2,zero,8664 <_gp+0xffff7890>
    86a8:	8221883a 	add	r16,r16,r8
    86ac:	88800117 	ldw	r2,4(r17)
    86b0:	b00f883a 	mov	r7,r22
    86b4:	b80d883a 	mov	r6,r23
    86b8:	880b883a 	mov	r5,r17
    86bc:	a009883a 	mov	r4,r20
    86c0:	103ee83a 	callr	r2
    86c4:	103fe71e 	bne	r2,zero,8664 <_gp+0xffff7890>
    86c8:	85a1883a 	add	r16,r16,r22
    86cc:	e02d883a 	mov	r22,fp
    86d0:	00001106 	br	8718 <___vfprintf_internal_r+0x4e4>
    86d4:	00c00044 	movi	r3,1
    86d8:	04ffffc4 	movi	r19,-1
    86dc:	d8000e15 	stw	zero,56(sp)
    86e0:	d8c00a15 	stw	r3,40(sp)
    86e4:	05400284 	movi	r21,10
    86e8:	9825883a 	mov	r18,r19
    86ec:	d8000c15 	stw	zero,48(sp)
    86f0:	d8000b15 	stw	zero,44(sp)
    86f4:	182f883a 	mov	r23,r3
    86f8:	00000806 	br	871c <___vfprintf_internal_r+0x4e8>
    86fc:	ddc00b15 	stw	r23,44(sp)
    8700:	05c00084 	movi	r23,2
    8704:	00000506 	br	871c <___vfprintf_internal_r+0x4e8>
    8708:	00c00044 	movi	r3,1
    870c:	d8c00c15 	stw	r3,48(sp)
    8710:	05c000c4 	movi	r23,3
    8714:	00000106 	br	871c <___vfprintf_internal_r+0x4e8>
    8718:	002f883a 	mov	r23,zero
    871c:	d8c00f17 	ldw	r3,60(sp)
    8720:	18c00044 	addi	r3,r3,1
    8724:	d8c00f15 	stw	r3,60(sp)
    8728:	003edc06 	br	829c <_gp+0xffff74c8>
    872c:	8005883a 	mov	r2,r16
    8730:	dfc01a17 	ldw	ra,104(sp)
    8734:	df001917 	ldw	fp,100(sp)
    8738:	ddc01817 	ldw	r23,96(sp)
    873c:	dd801717 	ldw	r22,92(sp)
    8740:	dd401617 	ldw	r21,88(sp)
    8744:	dd001517 	ldw	r20,84(sp)
    8748:	dcc01417 	ldw	r19,80(sp)
    874c:	dc801317 	ldw	r18,76(sp)
    8750:	dc401217 	ldw	r17,72(sp)
    8754:	dc001117 	ldw	r16,68(sp)
    8758:	dec01b04 	addi	sp,sp,108
    875c:	f800283a 	ret

00008760 <__vfprintf_internal>:
    8760:	00800074 	movhi	r2,1
    8764:	10a37604 	addi	r2,r2,-29224
    8768:	300f883a 	mov	r7,r6
    876c:	280d883a 	mov	r6,r5
    8770:	200b883a 	mov	r5,r4
    8774:	11000017 	ldw	r4,0(r2)
    8778:	00082341 	jmpi	8234 <___vfprintf_internal_r>

0000877c <__sfvwrite_small_dev>:
    877c:	2880000b 	ldhu	r2,0(r5)
    8780:	1080020c 	andi	r2,r2,8
    8784:	10002126 	beq	r2,zero,880c <__sfvwrite_small_dev+0x90>
    8788:	2880008f 	ldh	r2,2(r5)
    878c:	defffa04 	addi	sp,sp,-24
    8790:	dc000015 	stw	r16,0(sp)
    8794:	dfc00515 	stw	ra,20(sp)
    8798:	dd000415 	stw	r20,16(sp)
    879c:	dcc00315 	stw	r19,12(sp)
    87a0:	dc800215 	stw	r18,8(sp)
    87a4:	dc400115 	stw	r17,4(sp)
    87a8:	2821883a 	mov	r16,r5
    87ac:	10001216 	blt	r2,zero,87f8 <__sfvwrite_small_dev+0x7c>
    87b0:	2027883a 	mov	r19,r4
    87b4:	3025883a 	mov	r18,r6
    87b8:	3823883a 	mov	r17,r7
    87bc:	05010004 	movi	r20,1024
    87c0:	04400b0e 	bge	zero,r17,87f0 <__sfvwrite_small_dev+0x74>
    87c4:	880f883a 	mov	r7,r17
    87c8:	a440010e 	bge	r20,r17,87d0 <__sfvwrite_small_dev+0x54>
    87cc:	01c10004 	movi	r7,1024
    87d0:	8140008f 	ldh	r5,2(r16)
    87d4:	900d883a 	mov	r6,r18
    87d8:	9809883a 	mov	r4,r19
    87dc:	00088500 	call	8850 <_write_r>
    87e0:	0080050e 	bge	zero,r2,87f8 <__sfvwrite_small_dev+0x7c>
    87e4:	88a3c83a 	sub	r17,r17,r2
    87e8:	90a5883a 	add	r18,r18,r2
    87ec:	003ff406 	br	87c0 <_gp+0xffff79ec>
    87f0:	0005883a 	mov	r2,zero
    87f4:	00000706 	br	8814 <__sfvwrite_small_dev+0x98>
    87f8:	8080000b 	ldhu	r2,0(r16)
    87fc:	10801014 	ori	r2,r2,64
    8800:	8080000d 	sth	r2,0(r16)
    8804:	00bfffc4 	movi	r2,-1
    8808:	00000206 	br	8814 <__sfvwrite_small_dev+0x98>
    880c:	00bfffc4 	movi	r2,-1
    8810:	f800283a 	ret
    8814:	dfc00517 	ldw	ra,20(sp)
    8818:	dd000417 	ldw	r20,16(sp)
    881c:	dcc00317 	ldw	r19,12(sp)
    8820:	dc800217 	ldw	r18,8(sp)
    8824:	dc400117 	ldw	r17,4(sp)
    8828:	dc000017 	ldw	r16,0(sp)
    882c:	dec00604 	addi	sp,sp,24
    8830:	f800283a 	ret

00008834 <strlen>:
    8834:	2005883a 	mov	r2,r4
    8838:	10c00007 	ldb	r3,0(r2)
    883c:	18000226 	beq	r3,zero,8848 <strlen+0x14>
    8840:	10800044 	addi	r2,r2,1
    8844:	003ffc06 	br	8838 <_gp+0xffff7a64>
    8848:	1105c83a 	sub	r2,r2,r4
    884c:	f800283a 	ret

00008850 <_write_r>:
    8850:	defffd04 	addi	sp,sp,-12
    8854:	dc000015 	stw	r16,0(sp)
    8858:	04000074 	movhi	r16,1
    885c:	dc400115 	stw	r17,4(sp)
    8860:	8423b904 	addi	r16,r16,-28956
    8864:	2023883a 	mov	r17,r4
    8868:	2809883a 	mov	r4,r5
    886c:	300b883a 	mov	r5,r6
    8870:	380d883a 	mov	r6,r7
    8874:	dfc00215 	stw	ra,8(sp)
    8878:	80000015 	stw	zero,0(r16)
    887c:	0008bc80 	call	8bc8 <write>
    8880:	00ffffc4 	movi	r3,-1
    8884:	10c0031e 	bne	r2,r3,8894 <_write_r+0x44>
    8888:	80c00017 	ldw	r3,0(r16)
    888c:	18000126 	beq	r3,zero,8894 <_write_r+0x44>
    8890:	88c00015 	stw	r3,0(r17)
    8894:	dfc00217 	ldw	ra,8(sp)
    8898:	dc400117 	ldw	r17,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00304 	addi	sp,sp,12
    88a4:	f800283a 	ret

000088a8 <__divsi3>:
    88a8:	20001b16 	blt	r4,zero,8918 <__divsi3+0x70>
    88ac:	000f883a 	mov	r7,zero
    88b0:	28001616 	blt	r5,zero,890c <__divsi3+0x64>
    88b4:	200d883a 	mov	r6,r4
    88b8:	29001a2e 	bgeu	r5,r4,8924 <__divsi3+0x7c>
    88bc:	00800804 	movi	r2,32
    88c0:	00c00044 	movi	r3,1
    88c4:	00000106 	br	88cc <__divsi3+0x24>
    88c8:	10000d26 	beq	r2,zero,8900 <__divsi3+0x58>
    88cc:	294b883a 	add	r5,r5,r5
    88d0:	10bfffc4 	addi	r2,r2,-1
    88d4:	18c7883a 	add	r3,r3,r3
    88d8:	293ffb36 	bltu	r5,r4,88c8 <_gp+0xffff7af4>
    88dc:	0005883a 	mov	r2,zero
    88e0:	18000726 	beq	r3,zero,8900 <__divsi3+0x58>
    88e4:	0005883a 	mov	r2,zero
    88e8:	31400236 	bltu	r6,r5,88f4 <__divsi3+0x4c>
    88ec:	314dc83a 	sub	r6,r6,r5
    88f0:	10c4b03a 	or	r2,r2,r3
    88f4:	1806d07a 	srli	r3,r3,1
    88f8:	280ad07a 	srli	r5,r5,1
    88fc:	183ffa1e 	bne	r3,zero,88e8 <_gp+0xffff7b14>
    8900:	38000126 	beq	r7,zero,8908 <__divsi3+0x60>
    8904:	0085c83a 	sub	r2,zero,r2
    8908:	f800283a 	ret
    890c:	014bc83a 	sub	r5,zero,r5
    8910:	39c0005c 	xori	r7,r7,1
    8914:	003fe706 	br	88b4 <_gp+0xffff7ae0>
    8918:	0109c83a 	sub	r4,zero,r4
    891c:	01c00044 	movi	r7,1
    8920:	003fe306 	br	88b0 <_gp+0xffff7adc>
    8924:	00c00044 	movi	r3,1
    8928:	003fee06 	br	88e4 <_gp+0xffff7b10>

0000892c <__modsi3>:
    892c:	20001716 	blt	r4,zero,898c <__modsi3+0x60>
    8930:	000f883a 	mov	r7,zero
    8934:	2005883a 	mov	r2,r4
    8938:	28001216 	blt	r5,zero,8984 <__modsi3+0x58>
    893c:	2900162e 	bgeu	r5,r4,8998 <__modsi3+0x6c>
    8940:	01800804 	movi	r6,32
    8944:	00c00044 	movi	r3,1
    8948:	00000106 	br	8950 <__modsi3+0x24>
    894c:	30000a26 	beq	r6,zero,8978 <__modsi3+0x4c>
    8950:	294b883a 	add	r5,r5,r5
    8954:	31bfffc4 	addi	r6,r6,-1
    8958:	18c7883a 	add	r3,r3,r3
    895c:	293ffb36 	bltu	r5,r4,894c <_gp+0xffff7b78>
    8960:	18000526 	beq	r3,zero,8978 <__modsi3+0x4c>
    8964:	1806d07a 	srli	r3,r3,1
    8968:	11400136 	bltu	r2,r5,8970 <__modsi3+0x44>
    896c:	1145c83a 	sub	r2,r2,r5
    8970:	280ad07a 	srli	r5,r5,1
    8974:	183ffb1e 	bne	r3,zero,8964 <_gp+0xffff7b90>
    8978:	38000126 	beq	r7,zero,8980 <__modsi3+0x54>
    897c:	0085c83a 	sub	r2,zero,r2
    8980:	f800283a 	ret
    8984:	014bc83a 	sub	r5,zero,r5
    8988:	003fec06 	br	893c <_gp+0xffff7b68>
    898c:	0109c83a 	sub	r4,zero,r4
    8990:	01c00044 	movi	r7,1
    8994:	003fe706 	br	8934 <_gp+0xffff7b60>
    8998:	00c00044 	movi	r3,1
    899c:	003ff106 	br	8964 <_gp+0xffff7b90>

000089a0 <__udivsi3>:
    89a0:	200d883a 	mov	r6,r4
    89a4:	2900152e 	bgeu	r5,r4,89fc <__udivsi3+0x5c>
    89a8:	28001416 	blt	r5,zero,89fc <__udivsi3+0x5c>
    89ac:	00800804 	movi	r2,32
    89b0:	00c00044 	movi	r3,1
    89b4:	00000206 	br	89c0 <__udivsi3+0x20>
    89b8:	10000e26 	beq	r2,zero,89f4 <__udivsi3+0x54>
    89bc:	28000516 	blt	r5,zero,89d4 <__udivsi3+0x34>
    89c0:	294b883a 	add	r5,r5,r5
    89c4:	10bfffc4 	addi	r2,r2,-1
    89c8:	18c7883a 	add	r3,r3,r3
    89cc:	293ffa36 	bltu	r5,r4,89b8 <_gp+0xffff7be4>
    89d0:	18000826 	beq	r3,zero,89f4 <__udivsi3+0x54>
    89d4:	0005883a 	mov	r2,zero
    89d8:	31400236 	bltu	r6,r5,89e4 <__udivsi3+0x44>
    89dc:	314dc83a 	sub	r6,r6,r5
    89e0:	10c4b03a 	or	r2,r2,r3
    89e4:	1806d07a 	srli	r3,r3,1
    89e8:	280ad07a 	srli	r5,r5,1
    89ec:	183ffa1e 	bne	r3,zero,89d8 <_gp+0xffff7c04>
    89f0:	f800283a 	ret
    89f4:	0005883a 	mov	r2,zero
    89f8:	f800283a 	ret
    89fc:	00c00044 	movi	r3,1
    8a00:	003ff406 	br	89d4 <_gp+0xffff7c00>

00008a04 <__umodsi3>:
    8a04:	2005883a 	mov	r2,r4
    8a08:	2900122e 	bgeu	r5,r4,8a54 <__umodsi3+0x50>
    8a0c:	28001116 	blt	r5,zero,8a54 <__umodsi3+0x50>
    8a10:	01800804 	movi	r6,32
    8a14:	00c00044 	movi	r3,1
    8a18:	00000206 	br	8a24 <__umodsi3+0x20>
    8a1c:	30000c26 	beq	r6,zero,8a50 <__umodsi3+0x4c>
    8a20:	28000516 	blt	r5,zero,8a38 <__umodsi3+0x34>
    8a24:	294b883a 	add	r5,r5,r5
    8a28:	31bfffc4 	addi	r6,r6,-1
    8a2c:	18c7883a 	add	r3,r3,r3
    8a30:	293ffa36 	bltu	r5,r4,8a1c <_gp+0xffff7c48>
    8a34:	18000626 	beq	r3,zero,8a50 <__umodsi3+0x4c>
    8a38:	1806d07a 	srli	r3,r3,1
    8a3c:	11400136 	bltu	r2,r5,8a44 <__umodsi3+0x40>
    8a40:	1145c83a 	sub	r2,r2,r5
    8a44:	280ad07a 	srli	r5,r5,1
    8a48:	183ffb1e 	bne	r3,zero,8a38 <_gp+0xffff7c64>
    8a4c:	f800283a 	ret
    8a50:	f800283a 	ret
    8a54:	00c00044 	movi	r3,1
    8a58:	003ff706 	br	8a38 <_gp+0xffff7c64>

00008a5c <__mulsi3>:
    8a5c:	0005883a 	mov	r2,zero
    8a60:	20000726 	beq	r4,zero,8a80 <__mulsi3+0x24>
    8a64:	20c0004c 	andi	r3,r4,1
    8a68:	2008d07a 	srli	r4,r4,1
    8a6c:	18000126 	beq	r3,zero,8a74 <__mulsi3+0x18>
    8a70:	1145883a 	add	r2,r2,r5
    8a74:	294b883a 	add	r5,r5,r5
    8a78:	203ffa1e 	bne	r4,zero,8a64 <_gp+0xffff7c90>
    8a7c:	f800283a 	ret
    8a80:	f800283a 	ret

00008a84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8a84:	deffff04 	addi	sp,sp,-4
    8a88:	01000074 	movhi	r4,1
    8a8c:	01400074 	movhi	r5,1
    8a90:	dfc00015 	stw	ra,0(sp)
    8a94:	21233d04 	addi	r4,r4,-29452
    8a98:	29637904 	addi	r5,r5,-29212

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a9c:	2140061e 	bne	r4,r5,8ab8 <alt_load+0x34>
    8aa0:	01000074 	movhi	r4,1
    8aa4:	01400074 	movhi	r5,1
    8aa8:	21200804 	addi	r4,r4,-32736
    8aac:	29600804 	addi	r5,r5,-32736
    8ab0:	2140121e 	bne	r4,r5,8afc <alt_load+0x78>
    8ab4:	00000b06 	br	8ae4 <alt_load+0x60>
    8ab8:	00c00074 	movhi	r3,1
    8abc:	18e37904 	addi	r3,r3,-29212
    8ac0:	1907c83a 	sub	r3,r3,r4
    8ac4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ac8:	10fff526 	beq	r2,r3,8aa0 <_gp+0xffff7ccc>
    {
      *to++ = *from++;
    8acc:	114f883a 	add	r7,r2,r5
    8ad0:	39c00017 	ldw	r7,0(r7)
    8ad4:	110d883a 	add	r6,r2,r4
    8ad8:	10800104 	addi	r2,r2,4
    8adc:	31c00015 	stw	r7,0(r6)
    8ae0:	003ff906 	br	8ac8 <_gp+0xffff7cf4>
    8ae4:	01000074 	movhi	r4,1
    8ae8:	01400074 	movhi	r5,1
    8aec:	21232404 	addi	r4,r4,-29552
    8af0:	29632404 	addi	r5,r5,-29552

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8af4:	2140101e 	bne	r4,r5,8b38 <alt_load+0xb4>
    8af8:	00000b06 	br	8b28 <alt_load+0xa4>
    8afc:	00c00074 	movhi	r3,1
    8b00:	18e00804 	addi	r3,r3,-32736
    8b04:	1907c83a 	sub	r3,r3,r4
    8b08:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b0c:	10fff526 	beq	r2,r3,8ae4 <_gp+0xffff7d10>
    {
      *to++ = *from++;
    8b10:	114f883a 	add	r7,r2,r5
    8b14:	39c00017 	ldw	r7,0(r7)
    8b18:	110d883a 	add	r6,r2,r4
    8b1c:	10800104 	addi	r2,r2,4
    8b20:	31c00015 	stw	r7,0(r6)
    8b24:	003ff906 	br	8b0c <_gp+0xffff7d38>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b28:	0008c800 	call	8c80 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b2c:	dfc00017 	ldw	ra,0(sp)
    8b30:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8b34:	0008c841 	jmpi	8c84 <alt_icache_flush_all>
    8b38:	00c00074 	movhi	r3,1
    8b3c:	18e33d04 	addi	r3,r3,-29452
    8b40:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b44:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b48:	18bff726 	beq	r3,r2,8b28 <_gp+0xffff7d54>
    {
      *to++ = *from++;
    8b4c:	114f883a 	add	r7,r2,r5
    8b50:	39c00017 	ldw	r7,0(r7)
    8b54:	110d883a 	add	r6,r2,r4
    8b58:	10800104 	addi	r2,r2,4
    8b5c:	31c00015 	stw	r7,0(r6)
    8b60:	003ff906 	br	8b48 <_gp+0xffff7d74>

00008b64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b64:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b68:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b6c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b70:	0008c280 	call	8c28 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8b74:	0008c480 	call	8c48 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b78:	d1a04517 	ldw	r6,-32492(gp)
    8b7c:	d1604617 	ldw	r5,-32488(gp)
    8b80:	d1204717 	ldw	r4,-32484(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8b84:	dfc00017 	ldw	ra,0(sp)
    8b88:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b8c:	000805c1 	jmpi	805c <main>

00008b90 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8b90:	defffe04 	addi	sp,sp,-8
    8b94:	dc000015 	stw	r16,0(sp)
    8b98:	dfc00115 	stw	ra,4(sp)
    8b9c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8ba0:	00088340 	call	8834 <strlen>
    8ba4:	01000074 	movhi	r4,1
    8ba8:	000f883a 	mov	r7,zero
    8bac:	100d883a 	mov	r6,r2
    8bb0:	800b883a 	mov	r5,r16
    8bb4:	21237704 	addi	r4,r4,-29220
#else
    return fputs(str, stdout);
#endif
#endif
}
    8bb8:	dfc00117 	ldw	ra,4(sp)
    8bbc:	dc000017 	ldw	r16,0(sp)
    8bc0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8bc4:	0008c4c1 	jmpi	8c4c <altera_avalon_jtag_uart_write>

00008bc8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8bc8:	00800044 	movi	r2,1
    8bcc:	20800226 	beq	r4,r2,8bd8 <write+0x10>
    8bd0:	00800084 	movi	r2,2
    8bd4:	2080041e 	bne	r4,r2,8be8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8bd8:	01000074 	movhi	r4,1
    8bdc:	000f883a 	mov	r7,zero
    8be0:	21237704 	addi	r4,r4,-29220
    8be4:	0008c4c1 	jmpi	8c4c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8be8:	d0a00317 	ldw	r2,-32756(gp)
    8bec:	10000926 	beq	r2,zero,8c14 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8bf0:	deffff04 	addi	sp,sp,-4
    8bf4:	dfc00015 	stw	ra,0(sp)
    8bf8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8bfc:	00c01444 	movi	r3,81
    8c00:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c04:	00bfffc4 	movi	r2,-1
    8c08:	dfc00017 	ldw	ra,0(sp)
    8c0c:	dec00104 	addi	sp,sp,4
    8c10:	f800283a 	ret
    8c14:	d0a04404 	addi	r2,gp,-32496
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8c18:	00c01444 	movi	r3,81
    8c1c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c20:	00bfffc4 	movi	r2,-1
    8c24:	f800283a 	ret

00008c28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8c28:	deffff04 	addi	sp,sp,-4
    8c2c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    8c30:	0008c880 	call	8c88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8c34:	00800044 	movi	r2,1
    8c38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8c3c:	dfc00017 	ldw	ra,0(sp)
    8c40:	dec00104 	addi	sp,sp,4
    8c44:	f800283a 	ret

00008c48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8c48:	f800283a 	ret

00008c4c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8c4c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8c50:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8c54:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c58:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8c5c:	2980072e 	bgeu	r5,r6,8c7c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c60:	38c00037 	ldwio	r3,0(r7)
    8c64:	18ffffec 	andhi	r3,r3,65535
    8c68:	183ffc26 	beq	r3,zero,8c5c <_gp+0xffff7e88>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8c6c:	28c00007 	ldb	r3,0(r5)
    8c70:	20c00035 	stwio	r3,0(r4)
    8c74:	29400044 	addi	r5,r5,1
    8c78:	003ff806 	br	8c5c <_gp+0xffff7e88>

  return count;
}
    8c7c:	f800283a 	ret

00008c80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8c80:	f800283a 	ret

00008c84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8c84:	f800283a 	ret

00008c88 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8c88:	000170fa 	wrctl	ienable,zero
    8c8c:	f800283a 	ret
