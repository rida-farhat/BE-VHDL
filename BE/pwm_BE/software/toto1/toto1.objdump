
toto1.elf:     file format elf32-littlenios2
toto1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000528 memsz 0x00000528 flags r-x
    LOAD off    0x00001548 vaddr 0x00008548 paddr 0x0000854c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001550 vaddr 0x00008550 paddr 0x00008550 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000154c  2**0
                  CONTENTS
  2 .text         000004f8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00008518  00008518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00008548  0000854c  00001548  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008550  00008550  00001550  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00008560  00008560  0000154c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001570  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000109c  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008f0  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000a8d  00000000  00000000  000030e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000258  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007e4  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006ea  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00004ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005c5e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00005c61  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005c64  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005c65  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00005c66  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00005c71  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00005c7c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00005c87  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  00005c8d  2**0
                  CONTENTS, READONLY
 26 .jdi          0000458c  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00039ac9  00000000  00000000  0000a244  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008518 l    d  .rodata	00000000 .rodata
00008548 l    d  .rwdata	00000000 .rwdata
00008550 l    d  .bss	00000000 .bss
00008560 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../toto1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000081c8 g     F .text	0000002c alt_main
0000854c g       *ABS*	00000000 __flash_rwdata_start
000081f4 g     F .text	00000038 alt_putstr
00008318 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008558 g     O .bss	00000004 alt_argv
00010548 g       *ABS*	00000000 _gp
0000822c g     F .text	00000004 usleep
00008434 g     F .text	00000064 .hidden __udivsi3
00008560 g       *ABS*	00000000 __bss_end
00008310 g     F .text	00000004 alt_dcache_flush_all
0000854c g       *ABS*	00000000 __ram_rwdata_end
00008548 g       *ABS*	00000000 __ram_rodata_end
00008548 g     O .rwdata	00000004 jtag_uart_0
00008498 g     F .text	00000058 .hidden __umodsi3
00008560 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008254 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008250 g     F .text	00000004 alt_sys_init
000084f0 g     F .text	00000028 .hidden __mulsi3
00008548 g       *ABS*	00000000 __ram_rwdata_start
00008518 g       *ABS*	00000000 __ram_rodata_start
00008288 g     F .text	00000088 alt_busy_sleep
00008560 g       *ABS*	00000000 __alt_stack_base
00008550 g       *ABS*	00000000 __bss_start
0000805c g     F .text	0000008c main
00008000 g       *ABS*	00000000 __alt_mem_RAM
00008554 g     O .bss	00000004 alt_envp
0000833c g     F .text	00000084 .hidden __divsi3
00008518 g       *ABS*	00000000 __flash_rodata_start
00008230 g     F .text	00000020 alt_irq_init
0000855c g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000854c g       *ABS*	00000000 _edata
00008560 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008550 g     O .bss	00000001 a
000083c0 g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008320 g     F .text	0000001c strlen
00008314 g     F .text	00000004 alt_icache_flush_all
000080e8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6815214 	ori	gp,gp,1352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a15414 	ori	r2,r2,34128

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e15814 	ori	r3,r3,34144

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7afc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080e80 	call	80e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081c80 	call	81c8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7b10>

0000805c <main>:
	}
}  */


int main()
{ 
    805c:	defffb04 	addi	sp,sp,-20
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
	}
}  */


int main()
{ 
    8064:	dc400115 	stw	r17,4(sp)
    8068:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	21214604 	addi	r4,r4,-31464

  /* Event loop never exits. */
  while (1)
  {
	  alt_putstr("Hello from the while!\n");
	  a=(*boutons&3);
    8070:	04400074 	movhi	r17,1
	  usleep(10000);

	  switch(a)
	  {
	  case 0: *leds=0;break;
	  case 1: *leds=0;break;
    8074:	04000074 	movhi	r16,1
	}
}  */


int main()
{ 
    8078:	dc800215 	stw	r18,8(sp)
    807c:	dfc00415 	stw	ra,16(sp)
    8080:	dcc00315 	stw	r19,12(sp)

  /* Event loop never exits. */
  while (1)
  {
	  alt_putstr("Hello from the while!\n");
	  a=(*boutons&3);
    8084:	8c440804 	addi	r17,r17,4128
}  */


int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    8088:	00081f40 	call	81f4 <alt_putstr>
  {
	  alt_putstr("Hello from the while!\n");
	  a=(*boutons&3);
	  usleep(10000);

	  switch(a)
    808c:	04800044 	movi	r18,1
	  {
	  case 0: *leds=0;break;
	  case 1: *leds=0;break;
    8090:	84040404 	addi	r16,r16,4112
  {
	  alt_putstr("Hello from the while!\n");
	  a=(*boutons&3);
	  usleep(10000);

	  switch(a)
    8094:	04c00084 	movi	r19,2


  /* Event loop never exits. */
  while (1)
  {
	  alt_putstr("Hello from the while!\n");
    8098:	01000074 	movhi	r4,1
    809c:	21214c04 	addi	r4,r4,-31440
    80a0:	00081f40 	call	81f4 <alt_putstr>
	  a=(*boutons&3);
    80a4:	88800017 	ldw	r2,0(r17)
	  usleep(10000);
    80a8:	0109c404 	movi	r4,10000

  /* Event loop never exits. */
  while (1)
  {
	  alt_putstr("Hello from the while!\n");
	  a=(*boutons&3);
    80ac:	108000cc 	andi	r2,r2,3
    80b0:	d0a00205 	stb	r2,-32760(gp)
	  usleep(10000);
    80b4:	000822c0 	call	822c <usleep>

	  switch(a)
    80b8:	d0a00203 	ldbu	r2,-32760(gp)
    80bc:	14800826 	beq	r2,r18,80e0 <main+0x84>
    80c0:	10000726 	beq	r2,zero,80e0 <main+0x84>
    80c4:	14fff426 	beq	r2,r19,8098 <_gp+0xffff7b50>
    80c8:	00c000c4 	movi	r3,3
    80cc:	10c0041e 	bne	r2,r3,80e0 <main+0x84>
	  {
	  case 0: *leds=0;break;
	  case 1: *leds=0;break;
	  case 2: break;
	  case 3: *leds=*leds+1;break;
    80d0:	80800017 	ldw	r2,0(r16)
    80d4:	10800044 	addi	r2,r2,1
    80d8:	80800015 	stw	r2,0(r16)
    80dc:	003fed06 	br	8094 <_gp+0xffff7b4c>
	  default: *leds=0;break;
    80e0:	80000015 	stw	zero,0(r16)
    80e4:	003feb06 	br	8094 <_gp+0xffff7b4c>

000080e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80e8:	deffff04 	addi	sp,sp,-4
    80ec:	01000074 	movhi	r4,1
    80f0:	01400074 	movhi	r5,1
    80f4:	dfc00015 	stw	ra,0(sp)
    80f8:	21215204 	addi	r4,r4,-31416
    80fc:	29615304 	addi	r5,r5,-31412

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8100:	2140061e 	bne	r4,r5,811c <alt_load+0x34>
    8104:	01000074 	movhi	r4,1
    8108:	01400074 	movhi	r5,1
    810c:	21200804 	addi	r4,r4,-32736
    8110:	29600804 	addi	r5,r5,-32736
    8114:	2140121e 	bne	r4,r5,8160 <alt_load+0x78>
    8118:	00000b06 	br	8148 <alt_load+0x60>
    811c:	00c00074 	movhi	r3,1
    8120:	18e15304 	addi	r3,r3,-31412
    8124:	1907c83a 	sub	r3,r3,r4
    8128:	0005883a 	mov	r2,zero
  {
    while( to != end )
    812c:	10fff526 	beq	r2,r3,8104 <_gp+0xffff7bbc>
    {
      *to++ = *from++;
    8130:	114f883a 	add	r7,r2,r5
    8134:	39c00017 	ldw	r7,0(r7)
    8138:	110d883a 	add	r6,r2,r4
    813c:	10800104 	addi	r2,r2,4
    8140:	31c00015 	stw	r7,0(r6)
    8144:	003ff906 	br	812c <_gp+0xffff7be4>
    8148:	01000074 	movhi	r4,1
    814c:	01400074 	movhi	r5,1
    8150:	21214604 	addi	r4,r4,-31464
    8154:	29614604 	addi	r5,r5,-31464

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8158:	2140101e 	bne	r4,r5,819c <alt_load+0xb4>
    815c:	00000b06 	br	818c <alt_load+0xa4>
    8160:	00c00074 	movhi	r3,1
    8164:	18e00804 	addi	r3,r3,-32736
    8168:	1907c83a 	sub	r3,r3,r4
    816c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8170:	10fff526 	beq	r2,r3,8148 <_gp+0xffff7c00>
    {
      *to++ = *from++;
    8174:	114f883a 	add	r7,r2,r5
    8178:	39c00017 	ldw	r7,0(r7)
    817c:	110d883a 	add	r6,r2,r4
    8180:	10800104 	addi	r2,r2,4
    8184:	31c00015 	stw	r7,0(r6)
    8188:	003ff906 	br	8170 <_gp+0xffff7c28>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    818c:	00083100 	call	8310 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8190:	dfc00017 	ldw	ra,0(sp)
    8194:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8198:	00083141 	jmpi	8314 <alt_icache_flush_all>
    819c:	00c00074 	movhi	r3,1
    81a0:	18e15204 	addi	r3,r3,-31416
    81a4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    81a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    81ac:	18bff726 	beq	r3,r2,818c <_gp+0xffff7c44>
    {
      *to++ = *from++;
    81b0:	114f883a 	add	r7,r2,r5
    81b4:	39c00017 	ldw	r7,0(r7)
    81b8:	110d883a 	add	r6,r2,r4
    81bc:	10800104 	addi	r2,r2,4
    81c0:	31c00015 	stw	r7,0(r6)
    81c4:	003ff906 	br	81ac <_gp+0xffff7c64>

000081c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81cc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81d4:	00082300 	call	8230 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81d8:	00082500 	call	8250 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81dc:	d1a00317 	ldw	r6,-32756(gp)
    81e0:	d1600417 	ldw	r5,-32752(gp)
    81e4:	d1200517 	ldw	r4,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81e8:	dfc00017 	ldw	ra,0(sp)
    81ec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81f0:	000805c1 	jmpi	805c <main>

000081f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81f4:	defffe04 	addi	sp,sp,-8
    81f8:	dc000015 	stw	r16,0(sp)
    81fc:	dfc00115 	stw	ra,4(sp)
    8200:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8204:	00083200 	call	8320 <strlen>
    8208:	01000074 	movhi	r4,1
    820c:	000f883a 	mov	r7,zero
    8210:	100d883a 	mov	r6,r2
    8214:	800b883a 	mov	r5,r16
    8218:	21215204 	addi	r4,r4,-31416
#else
    return fputs(str, stdout);
#endif
#endif
}
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	dc000017 	ldw	r16,0(sp)
    8224:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8228:	00082541 	jmpi	8254 <altera_avalon_jtag_uart_write>

0000822c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    822c:	00082881 	jmpi	8288 <alt_busy_sleep>

00008230 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8230:	deffff04 	addi	sp,sp,-4
    8234:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    8238:	00083180 	call	8318 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    823c:	00800044 	movi	r2,1
    8240:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8244:	dfc00017 	ldw	ra,0(sp)
    8248:	dec00104 	addi	sp,sp,4
    824c:	f800283a 	ret

00008250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8250:	f800283a 	ret

00008254 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8254:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8258:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    825c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8260:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8264:	2980072e 	bgeu	r5,r6,8284 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8268:	38c00037 	ldwio	r3,0(r7)
    826c:	18ffffec 	andhi	r3,r3,65535
    8270:	183ffc26 	beq	r3,zero,8264 <_gp+0xffff7d1c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8274:	28c00007 	ldb	r3,0(r5)
    8278:	20c00035 	stwio	r3,0(r4)
    827c:	29400044 	addi	r5,r5,1
    8280:	003ff806 	br	8264 <_gp+0xffff7d1c>

  return count;
}
    8284:	f800283a 	ret

00008288 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8288:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    828c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8290:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8294:	dc000015 	stw	r16,0(sp)
    8298:	dfc00115 	stw	ra,4(sp)
    829c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    82a0:	00084340 	call	8434 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    82a4:	10001026 	beq	r2,zero,82e8 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    82a8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    82ac:	013999b4 	movhi	r4,58982
    82b0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    82b4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    82b8:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    82bc:	297fffc4 	addi	r5,r5,-1
    82c0:	283ffe1e 	bne	r5,zero,82bc <_gp+0xffff7d74>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    82c4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    82c8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    82cc:	18bffb16 	blt	r3,r2,82bc <_gp+0xffff7d74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82d0:	01400144 	movi	r5,5
    82d4:	8009883a 	mov	r4,r16
    82d8:	00084f00 	call	84f0 <__mulsi3>
    82dc:	10bfffc4 	addi	r2,r2,-1
    82e0:	103ffe1e 	bne	r2,zero,82dc <_gp+0xffff7d94>
    82e4:	00000506 	br	82fc <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82e8:	01400144 	movi	r5,5
    82ec:	8009883a 	mov	r4,r16
    82f0:	00084f00 	call	84f0 <__mulsi3>
    82f4:	10bfffc4 	addi	r2,r2,-1
    82f8:	00bffe16 	blt	zero,r2,82f4 <_gp+0xffff7dac>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    82fc:	0005883a 	mov	r2,zero
    8300:	dfc00117 	ldw	ra,4(sp)
    8304:	dc000017 	ldw	r16,0(sp)
    8308:	dec00204 	addi	sp,sp,8
    830c:	f800283a 	ret

00008310 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8310:	f800283a 	ret

00008314 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8314:	f800283a 	ret

00008318 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8318:	000170fa 	wrctl	ienable,zero
    831c:	f800283a 	ret

00008320 <strlen>:
    8320:	2005883a 	mov	r2,r4
    8324:	10c00007 	ldb	r3,0(r2)
    8328:	18000226 	beq	r3,zero,8334 <strlen+0x14>
    832c:	10800044 	addi	r2,r2,1
    8330:	003ffc06 	br	8324 <_gp+0xffff7ddc>
    8334:	1105c83a 	sub	r2,r2,r4
    8338:	f800283a 	ret

0000833c <__divsi3>:
    833c:	20001b16 	blt	r4,zero,83ac <__divsi3+0x70>
    8340:	000f883a 	mov	r7,zero
    8344:	28001616 	blt	r5,zero,83a0 <__divsi3+0x64>
    8348:	200d883a 	mov	r6,r4
    834c:	29001a2e 	bgeu	r5,r4,83b8 <__divsi3+0x7c>
    8350:	00800804 	movi	r2,32
    8354:	00c00044 	movi	r3,1
    8358:	00000106 	br	8360 <__divsi3+0x24>
    835c:	10000d26 	beq	r2,zero,8394 <__divsi3+0x58>
    8360:	294b883a 	add	r5,r5,r5
    8364:	10bfffc4 	addi	r2,r2,-1
    8368:	18c7883a 	add	r3,r3,r3
    836c:	293ffb36 	bltu	r5,r4,835c <_gp+0xffff7e14>
    8370:	0005883a 	mov	r2,zero
    8374:	18000726 	beq	r3,zero,8394 <__divsi3+0x58>
    8378:	0005883a 	mov	r2,zero
    837c:	31400236 	bltu	r6,r5,8388 <__divsi3+0x4c>
    8380:	314dc83a 	sub	r6,r6,r5
    8384:	10c4b03a 	or	r2,r2,r3
    8388:	1806d07a 	srli	r3,r3,1
    838c:	280ad07a 	srli	r5,r5,1
    8390:	183ffa1e 	bne	r3,zero,837c <_gp+0xffff7e34>
    8394:	38000126 	beq	r7,zero,839c <__divsi3+0x60>
    8398:	0085c83a 	sub	r2,zero,r2
    839c:	f800283a 	ret
    83a0:	014bc83a 	sub	r5,zero,r5
    83a4:	39c0005c 	xori	r7,r7,1
    83a8:	003fe706 	br	8348 <_gp+0xffff7e00>
    83ac:	0109c83a 	sub	r4,zero,r4
    83b0:	01c00044 	movi	r7,1
    83b4:	003fe306 	br	8344 <_gp+0xffff7dfc>
    83b8:	00c00044 	movi	r3,1
    83bc:	003fee06 	br	8378 <_gp+0xffff7e30>

000083c0 <__modsi3>:
    83c0:	20001716 	blt	r4,zero,8420 <__modsi3+0x60>
    83c4:	000f883a 	mov	r7,zero
    83c8:	2005883a 	mov	r2,r4
    83cc:	28001216 	blt	r5,zero,8418 <__modsi3+0x58>
    83d0:	2900162e 	bgeu	r5,r4,842c <__modsi3+0x6c>
    83d4:	01800804 	movi	r6,32
    83d8:	00c00044 	movi	r3,1
    83dc:	00000106 	br	83e4 <__modsi3+0x24>
    83e0:	30000a26 	beq	r6,zero,840c <__modsi3+0x4c>
    83e4:	294b883a 	add	r5,r5,r5
    83e8:	31bfffc4 	addi	r6,r6,-1
    83ec:	18c7883a 	add	r3,r3,r3
    83f0:	293ffb36 	bltu	r5,r4,83e0 <_gp+0xffff7e98>
    83f4:	18000526 	beq	r3,zero,840c <__modsi3+0x4c>
    83f8:	1806d07a 	srli	r3,r3,1
    83fc:	11400136 	bltu	r2,r5,8404 <__modsi3+0x44>
    8400:	1145c83a 	sub	r2,r2,r5
    8404:	280ad07a 	srli	r5,r5,1
    8408:	183ffb1e 	bne	r3,zero,83f8 <_gp+0xffff7eb0>
    840c:	38000126 	beq	r7,zero,8414 <__modsi3+0x54>
    8410:	0085c83a 	sub	r2,zero,r2
    8414:	f800283a 	ret
    8418:	014bc83a 	sub	r5,zero,r5
    841c:	003fec06 	br	83d0 <_gp+0xffff7e88>
    8420:	0109c83a 	sub	r4,zero,r4
    8424:	01c00044 	movi	r7,1
    8428:	003fe706 	br	83c8 <_gp+0xffff7e80>
    842c:	00c00044 	movi	r3,1
    8430:	003ff106 	br	83f8 <_gp+0xffff7eb0>

00008434 <__udivsi3>:
    8434:	200d883a 	mov	r6,r4
    8438:	2900152e 	bgeu	r5,r4,8490 <__udivsi3+0x5c>
    843c:	28001416 	blt	r5,zero,8490 <__udivsi3+0x5c>
    8440:	00800804 	movi	r2,32
    8444:	00c00044 	movi	r3,1
    8448:	00000206 	br	8454 <__udivsi3+0x20>
    844c:	10000e26 	beq	r2,zero,8488 <__udivsi3+0x54>
    8450:	28000516 	blt	r5,zero,8468 <__udivsi3+0x34>
    8454:	294b883a 	add	r5,r5,r5
    8458:	10bfffc4 	addi	r2,r2,-1
    845c:	18c7883a 	add	r3,r3,r3
    8460:	293ffa36 	bltu	r5,r4,844c <_gp+0xffff7f04>
    8464:	18000826 	beq	r3,zero,8488 <__udivsi3+0x54>
    8468:	0005883a 	mov	r2,zero
    846c:	31400236 	bltu	r6,r5,8478 <__udivsi3+0x44>
    8470:	314dc83a 	sub	r6,r6,r5
    8474:	10c4b03a 	or	r2,r2,r3
    8478:	1806d07a 	srli	r3,r3,1
    847c:	280ad07a 	srli	r5,r5,1
    8480:	183ffa1e 	bne	r3,zero,846c <_gp+0xffff7f24>
    8484:	f800283a 	ret
    8488:	0005883a 	mov	r2,zero
    848c:	f800283a 	ret
    8490:	00c00044 	movi	r3,1
    8494:	003ff406 	br	8468 <_gp+0xffff7f20>

00008498 <__umodsi3>:
    8498:	2005883a 	mov	r2,r4
    849c:	2900122e 	bgeu	r5,r4,84e8 <__umodsi3+0x50>
    84a0:	28001116 	blt	r5,zero,84e8 <__umodsi3+0x50>
    84a4:	01800804 	movi	r6,32
    84a8:	00c00044 	movi	r3,1
    84ac:	00000206 	br	84b8 <__umodsi3+0x20>
    84b0:	30000c26 	beq	r6,zero,84e4 <__umodsi3+0x4c>
    84b4:	28000516 	blt	r5,zero,84cc <__umodsi3+0x34>
    84b8:	294b883a 	add	r5,r5,r5
    84bc:	31bfffc4 	addi	r6,r6,-1
    84c0:	18c7883a 	add	r3,r3,r3
    84c4:	293ffa36 	bltu	r5,r4,84b0 <_gp+0xffff7f68>
    84c8:	18000626 	beq	r3,zero,84e4 <__umodsi3+0x4c>
    84cc:	1806d07a 	srli	r3,r3,1
    84d0:	11400136 	bltu	r2,r5,84d8 <__umodsi3+0x40>
    84d4:	1145c83a 	sub	r2,r2,r5
    84d8:	280ad07a 	srli	r5,r5,1
    84dc:	183ffb1e 	bne	r3,zero,84cc <_gp+0xffff7f84>
    84e0:	f800283a 	ret
    84e4:	f800283a 	ret
    84e8:	00c00044 	movi	r3,1
    84ec:	003ff706 	br	84cc <_gp+0xffff7f84>

000084f0 <__mulsi3>:
    84f0:	0005883a 	mov	r2,zero
    84f4:	20000726 	beq	r4,zero,8514 <__mulsi3+0x24>
    84f8:	20c0004c 	andi	r3,r4,1
    84fc:	2008d07a 	srli	r4,r4,1
    8500:	18000126 	beq	r3,zero,8508 <__mulsi3+0x18>
    8504:	1145883a 	add	r2,r2,r5
    8508:	294b883a 	add	r5,r5,r5
    850c:	203ffa1e 	bne	r4,zero,84f8 <_gp+0xffff7fb0>
    8510:	f800283a 	ret
    8514:	f800283a 	ret
