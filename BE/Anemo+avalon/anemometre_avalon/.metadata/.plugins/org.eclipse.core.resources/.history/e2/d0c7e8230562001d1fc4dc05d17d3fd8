/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
//#include "unistd.h"

#define leds (unsigned int *) LEDS_BASE
#define button (volatile char *) BP_BASE


#define in_freq (volatile int *) AVALON_ANEMOMETRE_0_BASE
#define continu (unsigned int *) AVALON_ANEMOMETRE_0_BASE + 1
#define start_stop (unsigned int *) AVALON_ANEMOMETRE_0_BASE + 2

unsigned int a,b,c,d;

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  continu = 1 ;
  start_stop = 0 ;
  *in_freq= 0x0200 ;
  b = *continu;
  c = *start_stop;
  d = *in_freq;
  printf("freq = %d\n", d);
  printf("continu = %d\n", b);
  printf("start_stop = %d\n", c);


  /* Event loop never exits. */
  while (1){

	  printf("inside while \n");

	  //printf("freq = %d\n", *freq);

	  if (*button == 2) {
		  //*leds = 0;
		  *in_freq = 100;
		  //*control = 0x0030 ;
		  //*control = 3 ;
		  printf("freq2222 = %d\n", *in_freq);
		 // printf("control = %d\n", *control);
	  }
	  else if (*button == 1)
		  {
		  printf("remise à zero");
		  *leds = 0;
		  *continu = 0x0000 ;
		  *start_stop= 0x0000 ;
		  //*freq = 0x00000400;
		  }

  }
}


 /**config = 7 ;
 résultat int = 0 ;
 données int = 0 ;
 int i = 0xFF ;
 while( 1 ){
 resultat = *code;
 données = i & resultat;
 printf( "données %d \n" , données);
 }
 renvoie 0 ;*/
